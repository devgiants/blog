<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[devGiants]]></title>
    <link href="/blog/tags/REST.xml" rel="self"/>
    <link href="/"/>
    <updated>2020-10-09T09:48:28+02:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Domofony Symfony application - part 1]]></title>
            <link href="/blog/2019/10/13/domofony-symfony-application/"/>
            <updated>2019-10-13T11:30:00+02:00</updated>
            <id>/blog/2019/10/13/domofony-symfony-application/</id>
            <content type="html"><![CDATA[<p>This post presents some implementation &amp; architecture choices made for achieving previous exposed goal in <strong>home automation
platform development wich would be focus on code and yaml configuration</strong>.</p>

<p><img src="https://devgiants.fr/images/posts/domofony/technical_components_with_items.png" alt="Technical components" /></p>

<h2 id="items">Items</h2>

<p>As stated in <a href="https://devgiants.fr/blog/2019/10/12/domofony-presentation/">previous post</a>, items are the <strong>end-of-chain component</strong>, 
but also the most important part of this very chain (from home automation point-of-view): 
temperature sensor, switch, relay, devices with all of this... 
Actuators like switches will handle orders they receive through the MQTT bus (by listening on correct channels), 
while sensors will publish their data on time on the same bus. As central system <a href="https://github.com/devgiants/domofony/blob/master/src/Command/MainMQTTLoopCommand.php#L62">will listen to all channels</a>, 
it will have the capability to <strong>trigger good code portions regarding to what happens</strong>.</p>

<p>According to what explained above, <code>Item</code> does not deserve the Entity status. 
Each item will require code, that will lie on <code>ItemHandler</code>. 
So just add it as a record line in database is irrelevant.</p>

<p>That's why I decided the best way IMHO to declare and describe an <code>Item</code> was by <code>yaml</code> configuration. Here is a typical
declaration :</p>

<p><strong>config/services.yaml</strong></p>

<pre><code class="yaml">    items:
        west_wall_shutter_1:                        # The item ID
            handler: App\ItemHandler\TestHandler    # The handler FQCN
            api:                                    # API configuration
                accepted_arguments:                 # Accepted arguments
                    - open
                    - close
</code></pre>

<p>The item ID will be used as query parameter when invoking API <code>Item</code> endpoint (see below).</p>

<h2 id="items-handlers">Items handlers</h2>

<p>This application have to let you develop the behavior you want while providing you the context needed to take home automation decisions. 
So the goals are :</p>

<ul>
<li><strong>Let you write code within the application</strong> : only the code the application can't provide so <strong>your home automation code only</strong>.</li>
<li><strong>Automatic insertion</strong> of your custom code in application architecture. Neither complex configuration nor manual inclusion.</li>
</ul>

<h3 id="handler-creation">Handler creation</h3>

<p><strong>App\ItemHandler\TestHandler</strong></p>

<pre><code class="php">class TestHandler implements ItemHandlerInterface
{
    public function __invoke(array $payload, RequestInterface $request)
        {
            // TODO: Implement __invoke() method, using parameters
        }
}
</code></pre>

<p>Each <code>ItemHandler</code> must implements <code>ItemHandlerInterface</code>, so it will be recognized as real item handler. 
The handler FQCN will be the same as the one used in above configuration.</p>

<p>The payload is the one given when item update endpoint is consumed. The request is the classical HttpFoundation <code>Request</code>
object, in case you need more than payload to get context for your item handling.</p>

<h3 id="item-handler-tagging">Item handler tagging</h3>

<p>In order to make it work out-of-the-box without manual service registration, <strong>automatic service tagging</strong> is used :</p>

<p><strong>config/services.yaml</strong></p>

<pre><code class="yaml">services:
   #...

    _instanceof:
        App\Model\ItemHandlerInterface:
            tags: ['app.item_handler']
            lazy: true
</code></pre>

<p>Above configuration will add <code>app.item_handler</code> tag <strong>automatically to all classes implementing <code>App\Model\ItemHandlerInterface</code></strong></p>

<p>Next, <a href="https://symfony.com/blog/new-in-symfony-3-4-simpler-injection-of-tagged-services">quite recent feature from Symfony 3.4</a> allow to <strong>locate and collect all those tagged services to pass them as argument</strong> :</p>

<p><strong>config/services.yaml</strong></p>

<pre><code class="yaml">services:
    App\Controller\ItemUpdateController:
        arguments: [!tagged app.item_handler]
</code></pre>

<p>The argument got here is an <code>ìterable</code> :</p>

<p><strong>App\Controller\ItemUpdateController</strong></p>

<pre><code class="php">/**
 * Class ItemUpdateController
 *
 * @package App\Controller
 */
class ItemUpdateController extends AbstractController
{

    /**
     * @var iterable $itemHandlers
     */
    protected $itemHandlers;

    /**
     * ItemUpdateController constructor.
     *
     * @param iterable $itemHandlers
     */
    public function __construct(
        iterable $itemHandlers
    ) {
        $this-&gt;itemHandlers    = $itemHandlers;
    }

    // ....

}
</code></pre>

<p><em>Note : only relevant arguments are kept here, for sake of brevity. Complete file <a href="https://github.com/devgiants/domofony/blob/master/src/Controller/ItemUpdateController.php">here</a>.</em></p>

<h3 id="item-updater-behind-the-scene">Item updater behind the scene</h3>

<p>Now, we just have to invoke the matching item handler. This is done when <code>ItemUpdateController</code> is itself invoked :</p>

<p><strong>App\Controller\ItemUpdateController</strong></p>

<pre><code class="php">class ItemUpdateController extends AbstractController
{
    public function __invoke(
        string $id,
        RequestStack $requestStack,
        ItemFinder $itemFinder
    ) {
        // Find item
        $item = $itemFinder-&gt;findById($id);

        // Extract and create handler instance
        $handlerFQCN = $item-&gt;getHandlerFQCN();

        if ( ! class_exists($handlerFQCN)) {
            throw new ClassNotFoundException();
        }

        foreach ($this-&gt;itemHandlers as $itemHandler) {
            // If handler found, extract payload and invoke it
            if ($itemHandler instanceof $handlerFQCN) {
                $request = $requestStack-&gt;getCurrentRequest();
                $payload = json_decode($request-&gt;getContent());

                // Pre handler event
                $preHandlerEvent = new PreHandlerCallEvent($item, $payload,
                    $request);
                $this-&gt;eventDispatcher-&gt;dispatch($preHandlerEvent);

                // Item handler invocation
                call_user_func($itemHandler, $preHandlerEvent-&gt;getPayload(),
                    $preHandlerEvent-&gt;getRequest());

                // Post handler event
                $postHandlerEvent = new PostHandlerCallEvent($preHandlerEvent-&gt;getItem(),
                    $preHandlerEvent-&gt;getPayload(),
                    $preHandlerEvent-&gt;getRequest());
                $this-&gt;eventDispatcher-&gt;dispatch($preHandlerEvent);

                return $postHandlerEvent-&gt;getItem();
            }
        }

        return $item;
    }
}
</code></pre>

<p><em>Note : only relevant code is kept here, for sake of brevity. Complete file <a href="https://github.com/devgiants/domofony/blob/master/src/Controller/ItemUpdateController.php">here</a>.</em></p>

<h2 id="api-usage">API usage</h2>

<p>The application exposes an <code>Item</code> API, used for retrieving item state (<code>GET</code>), and also send updates (<code>PUT</code>).</p>

<p>Reusing <code>Ìtem</code> example configured above, REST requests endpoint would be <code>http://mydomain.com/api/item/west_wall_shutter_1</code>.</p>

<p>API part is handled by wonderful <a href="https://api-platform.com/">API Plaftorm</a>. As stated in first part of this post, 
I ended up to the fact that <code>Item</code> ar not real entity. As I treated them with yaml configuration, 
I needed <strong>custom DataProvider allowed by API Platform for retrieving data that are not in Doctrine</strong>:</p>

<p><strong>App\DataProvider\ItemDataProvider</strong></p>

<pre><code class="php">namespace App\DataProvider;

use ApiPlatform\Core\DataProvider\ItemDataProviderInterface;
use ApiPlatform\Core\DataProvider\RestrictedDataProviderInterface;
use App\Model\Item;
use App\Service\ItemFinder;

/**
 * Class ItemDataProvider
 *
 * @package App\DataProvider
 */
final class ItemDataProvider implements ItemDataProviderInterface, RestrictedDataProviderInterface
{

    /**
     * @var ItemFinder
     */
    protected $itemFinder;

    /**
     * ItemDataProvider constructor.
     *
     * @param ItemFinder $itemFinder
     */
    public function __construct(ItemFinder $itemFinder)
    {
        $this-&gt;itemFinder = $itemFinder;
    }

    /**
     * @inheritDoc
     */
    public function supports(
        string $resourceClass,
        string $operationName = null,
        array $context = []
    ): bool {
        return Item::class === $resourceClass;
    }

    /**
     * @inheritDoc
     */
    public function getItem(
        string $resourceClass,
        $id,
        string $operationName = null,
        array $context = []
    ) {
        return $this-&gt;itemFinder-&gt;findById($id);
    }
}
</code></pre>

<p>This <code>DataProvider</code> relies on an <code>ItemFinder</code> service that have access to the <code>items</code> declared in configuration.</p>

<p>API configuration misses now specific route configuration, as we got out of the normal CRUD scope.</p>

<p>This is done here for ItemGetterController (<code>GET</code> requests) :</p>

<p><strong>App\Controller\ItemGetterController</strong></p>

<pre><code class="php">namespace App\Controller;

use App\Service\ItemFinder;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use App\Model\Item;

/**
 * Class ItemGetterController
 *
 * @package App\Controller
 */
class ItemGetterController extends AbstractController
{
    /**
     * @Route(
     *     name="devgiants.domofony.item.get",
     *     path="/api/item/{id}",
     *     methods={"GET"},
     *     defaults={
     *       "_api_resource_class": "App\Model\Item",
     *       "_api_item_operation_name": "get"
     *     }
     * )
     *
     * @param string $id
     * @param ItemFinder $itemFinder
     * @return Item
     */
    public function __invoke(string $id, ItemFinder $itemFinder)
    {
        return $itemFinder-&gt;findById($id);
    }
}
</code></pre>

<p>And the same stands for <code>ItemUpdateController</code> :</p>

<p><strong>App\Controller\ItemUpdateController</strong></p>

<pre><code class="php">/**
 * Class ItemUpdateController
 *
 * @package App\Controller
 */
class ItemUpdateController extends AbstractController
{
    /**
     * @Route(
     *     name="devgiants.domofony.item.update",
     *     path="/api/item/{id}",
     *     methods={"PUT"},
     *     defaults={
     *       "_api_resource_class": "App\Model\Item",
     *       "_api_item_operation_name": "put"
     *     }
     * )
     *
     * @param string $id
     * @param RequestStack $requestStack
     * @param ItemFinder $itemFinder
     *
     * @return Item
     * @throws ClassNotFoundException
     */
    public function __invoke(
        string $id,
        RequestStack $requestStack,
        ItemFinder $itemFinder
    ) {
        // ...
    }
}
</code></pre>

<h2 id="bundle-versus-application">Bundle versus application</h2>

<p>At start, I wanted to make a bundle, that can be plugged onto any other application. 
I quickly realized that <strong>required specific configuration</strong> and <strong>above-described architecture</strong> 
needed <strong>a complete boilerplate application</strong>, that will be installable with a <code>composer create-project</code> command.</p>

<p>Furthermore, this app business purpose makes it quite exclusive regarding usage : it will be used only for home 
automation context and <strong>it's highly improbable that it will be added to other existing application</strong>.</p>

<h3 id="application-custom-extension">Application custom extension</h3>

<p>In order to be able to use custom configuration namespace, and trigger configuration checks, <strong>I registered a custom extension 
within the application itself</strong> (this configuration usually lies on bundle). This is done by manually registering the
extension in <code>Kernel</code> :</p>

<p><strong>App\Kernel</strong></p>

<pre><code class="php">class Kernel extends BaseKernel
{
    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader)
    {
        $devgiantsDomofonyExtension = new DevgiantsDomofonyExtension();

        $container
            -&gt;addResource(new FileResource($this-&gt;getProjectDir().'/config/bundles.php'))
            // Register extension to make configuration working
            -&gt;registerExtension($devgiantsDomofonyExtension)
        ;
        // ...
    }
}
</code></pre>

<p>We are done here with specific implementations that required enlightments. 
Next post will be dedicated to the <strong>security part</strong> and <strong>MQTT loop command</strong>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Domofony presentation]]></title>
            <link href="/blog/2019/10/12/domofony-presentation/"/>
            <updated>2019-10-12T14:51:00+02:00</updated>
            <id>/blog/2019/10/12/domofony-presentation/</id>
            <content type="html"><![CDATA[<h2 id="home-automation">Home automation</h2>

<p>On my previous attempts on DIY home automation, I used the excellent <a href="https://www.openhab.org/">openHAB</a>.
At first glance, it seemed to have everything I looked for in an home automation context :</p>

<ul>
<li>Completely open-source</li>
<li><strong>Technology and vendor agnostic</strong> : one of the most important thing, I didn't want to rely on proprietary technology to build this system. Everything has to be transparent from ground to roof, and modifiable to ensure long-term usage and adaptation</li>
<li><strong>Ability to program for serious work</strong> : it's utterly important to me that real programmation feature would be available. Way I do things doesn't match with a click-land configuration job. Using <a href="https://www.eclipse.org/xtend/">Xtend</a> (because openHAB written in Java), it allows to create programs to drive your installation.</li>
</ul>

<p>So why change? Some cons :</p>

<ul>
<li>I realized after usage that all the stuff embedded (item branching with technologies, configuration...) simply wasn't for me</li>
<li>Xtend implementation in this usage, though really neat, does not allow things I wanted (such as script reuse accross handlers...)</li>
<li>All the Java stuff creates pressure on underlying hardware, thus forcing to have something powerful (old Raspberry Pis was not so good)</li>
</ul>

<p>Don't misunderstand me : OpenHAB is great job used y thousand of people accross the world. I just needed something else.</p>

<h2 id="domofony">Domofony</h2>

<p><em>Domotique</em> + <em>Symfony</em> = <a href="https://github.com/devgiants/domofony"><strong>Domofony</strong></a>.</p>

<p><em>Domotique</em> is the french word for home automation. First thing to know, I created this project for myself, and share it a good practice, but at start, not all things will be usable by everyone (such as the front-end app I plan to develop tailored to my use).</p>

<p><strong>This is a solution provided by a developer for developers</strong>. Exit click-land, all configuration is done in YAML.</p>

<h3 id="technical-components">Technical components</h3>

<p><img src="https://devgiants.fr/images/posts/domofony/technical_components_with_items.png" alt="Technical components" /></p>

<p>All part showed on above layout will be described and detailed in future posts. That being said, below is a quick description for bigger parts.</p>

<h4 id="front-end-application">Front-end application</h4>

<p>This is the application allowing user to interact with the system. It will consume REST API exposed by the server application.</p>

<h4 id="mosquitto-broker">Mosquitto broker</h4>

<p>The system relies so far on <a href="https://en.wikipedia.org/wiki/MQTT">MQTT protocol</a> 
(<a href="https://www.linkedin.com/pulse/mqtt-un-protocole-bas%C3%A9-sur-tcp-et-orient%C3%A9-iot-nicolas-bonniot/">here</a> a protocol tour in french) for exchanges between <strong>central system</strong> and <strong>items</strong>.
This protocol is ideal regarding it's asynchronous sequence and its lightweight. 
Security is not left aside, although TLS certificate usage means items must be more powerful than simple microcontrollers.</p>

<p><em>Note : an item is the end-device, such as sensor or actuator (or both). In my home automation system, this is mostly <a href="https://en.wikipedia.org/wiki/Single-board_computer">SBC</a> or ESP series microcontrollers</em></p>

<p>Future posts will handle in details <strong>items</strong>, <strong>Symfony application</strong>, <strong>Mosquitto broker &amp; client configuration</strong> and <strong>front-end application</strong>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[API versionning strategies]]></title>
            <link href="/blog/2018/12/11/api-versionning/"/>
            <updated>2018-12-11T17:04:00+01:00</updated>
            <id>/blog/2018/12/11/api-versionning/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>API are like any other programmed systems : they evolve during time, either with bugfixes or feature addition. There is a roadmap that can eventually bring to a <strong>backward compatibility break</strong> to ensure proper evolution regarding new features.</p>

<h2 id="versionning">Versionning</h2>

<p>Versionning is important, mainly to provide your API clients ways to ensure they use the proper version regarding their needs.</p>

<p>Few ways : 
 - Domain name : <code>https://v4.your-api.com</code>
 - URI prefix : <code>https://your-api.com/api/v4</code>
 - Query string : <code>https://your-api.com/api/?v=4.0.0</code>
 - Custom HTTP header : <code>X-API-Version: 4.0.0</code>
 - <code>Accept</code> HTTP header :  <code>Accept: application/vendor.app.your-app+json; version=4.0.0</code></p>

<p>Keep as the rule of thumb than changing URLs are <strong>generally bad idea</strong>. HTTP headers are the way to go. Below is a configuration possibility for the <code>Accept</code> header.</p>

<h2 id="fosrestbundle-configuration-for-%60accept%60-header">FOSRestBundle configuration for <code>Accept</code> header</h2>

<p>2 keys to add to FOSRestBundle configuration : <code>versionning</code> and <code>view:meme_types</code></p>

<h3 id="versionning">Versionning</h3>

<p>You need to tell FOSRestBundle you are using versionning in your app :</p>

<pre><code class="yaml">fos_rest:
  ...
  versioning:
    enabled: true
    resolvers:
      media_type: # Accept header
        enabled: true
        regex: '/(v|version)=(?P&lt;version&gt;[0-9\.]+)/'
</code></pre>

<p>Of course, you an freely adapt the regex to your needs.</p>

<h3 id="add-mime-type">Add MIME type</h3>

<p>As you can see above, the MIME type you send is now custom (<code>application/vendor.app.your-app+json; version=4.0.0</code>). You need to tell FOSRestBundle to accept it :</p>

<pre><code class="yaml">fos_rest:
  ...
  view:
    ...    
    mime_types:
      json: ['application/json', 'application/json;version=1.0', 'application/json;version=2.0']
</code></pre>

<p>For the sake of brevity, I just put the matching configurations key with <code>Accept</code> header.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[FOS REST Bundle : enforce strict behavior with query params requirements]]></title>
            <link href="/blog/2018/11/16/fos-rest-query-param-strict/"/>
            <updated>2018-11-16T17:15:00+01:00</updated>
            <id>/blog/2018/11/16/fos-rest-query-param-strict/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>Playing with <a href="https://github.com/FriendsOfSymfony/FOSRestBundle">FOS REST Bundle</a> on my journey to learn how to create rock-solid APIs, I started to create following action :</p>

<pre><code class="php">/**
     * @param PostHandler $postHandler
     * @param ParamFetcherInterface $paramFetcher
     * @Rest\Get("/posts/list")
     * @Rest\QueryParam(
     *     name="keyword",
     *     requirements="[a-zA-Z0-9]*",     
     *     nullable=true,
     *     description="The keyword to search for."
     * )
     * @Rest\QueryParam(
     *     name="order",
     *     requirements="asc|desc",
     *     default="asc",     
     *     description="Sort order (asc or desc)"
     * )
     * @Rest\QueryParam(
     *     name="limit",
     *     requirements="\d+",
     *     default="3",     
     *     description="Max number of posts per page."
     * )
     * @Rest\QueryParam(
     *     name="page",
     *     requirements="\d+",
     *     default="1",     
     *     description="The page wanted"
     * )
     * @Rest\View(
     *     statusCode = 200,
     *     serializerGroups = {"list"}
     * )
     *
     * @return Paginator
     */
    public function list(PostHandler $postHandler, ParamFetcherInterface $paramFetcher)
    {


        $postsList = $postHandler-&gt;search(
            intval($paramFetcher-&gt;get('limit')),
            intval($paramFetcher-&gt;get('page')),
            $paramFetcher-&gt;get('order'),
            $paramFetcher-&gt;get('keyword')
        );

        return $postsList;
    }
</code></pre>

<p>This simply expose a GET endpoint, with URL <code>/posts/list</code>, in order to return a... posts list. Several <code>QueryParam</code> can be passed in order to filter the obtained list. So, according to requirements given, following calls are acceptable (and processed) :
- <code>/posts/list?page=2</code> to get page 2, with default <code>limit</code>
- <code>/posts/list?order=desc</code> to order posts by ID descendant
- <code>/posts/list?keyword=test</code> to retrieves only posts with 'test' keyword.</p>

<h2 id="what-if...-we-don%27t-follow-requirements-%3F">What if... we don't follow requirements ?</h2>

<p>For each <code>QueryParam</code>, requirements are given in <a href="https://symfony.com/doc/current/routing/conditions.html">an regexp way</a>. Actually, requirements annotations are compiled to PHP. So, if I try :</p>

<ul>
<li><code>/posts/list?page=a</code></li>
<li><code>/posts/list?order=other</code></li>
<li><code>/posts/list?keyword=test%20test2</code></li>
</ul>

<p>What will happen? Nothing. By default, FOS REST Bundle will take <strong>the offending <code>QueryParam</code> default value instead</strong> of your offending value.</p>

<h2 id="what-if-we-want-to-raise-an-error%3F">What if we want to raise an error?</h2>

<p>Depending to which <code>QueryParam</code> you deal with, you may want to raise an error or not. For the above example, client developers will love you if you provide explicit errors and comprehensive messages for those <code>QueryParam</code>. The solution for that is simple : just add the <code>QueryParam</code> attribute <code>strict</code> to true in order to force FOS REST Bundle to raise an Exception.
With proper configuration (such as <code>ExceptionController</code>), you achieve to throw out-of-the-box exceptions like this :</p>

<pre><code>GET http://localhost:8081/posts/list?page=a

HTTP/1.1 400 Bad Request
Date: Fri, 16 Nov 2018 16:34:15 GMT
Server: Apache/2.4.18 (Ubuntu)
Cache-Control: no-cache, private
X-Debug-Token: 34ff9b
X-Debug-Token-Link: http://localhost:8081/_profiler/34ff9b
X-Previous-Debug-Token: fd05dc
Connection: close
Transfer-Encoding: chunked
Content-Type: application/json

{
  "error": "Parameter \"page\" of value \"a\" violated a constraint \"Parameter 'page' value, does not match requirements '\\d+'\""
}

Response code: 400 (Bad Request); Time: 4106ms; Content length: 137 bytes
</code></pre>
]]></content>
        </entry>
    </feed>