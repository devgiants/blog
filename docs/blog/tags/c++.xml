<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[devGiants]]></title>
    <link href="/blog/tags/c++.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-10-12T22:52:30+02:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[C++ allow inline initialisation]]></title>
            <link href="/blog/2018/11/15/c++-inline-initialisation/"/>
            <updated>2018-11-15T10:00:00+01:00</updated>
            <id>/blog/2018/11/15/c++-inline-initialisation/</id>
            <content type="html"><![CDATA[<p>As a PHP developer, I was greatly surprised when discovering, while learning C++, the <strong>inline initialisation</strong> process</p>

<p>Using PHP 7, you would start a class for example with :</p>

<pre><code class="php">/**
 * Class User
 * @package
 */
class User {
    /**
     * @var int $id
     */
    private int $id;

    /**
     * @var string $name
     */
    private string $name;

    /**
     * User constructor.
     *
     * @param int $id
     * @param string $name
     */
    public function __construct(int $id, string $name) {
        $this-&gt;id = $id;
        $this-&gt;name = $name;
    }
}
</code></pre>

<p>Using C++, same class would become</p>

<p><strong>user.h</strong></p>

<pre><code class="c">#ifndef USER_USER_H
#define USER_USER_H

#include &lt;iostream&gt;


class User {
private:
    /**
     *
     */
    int m_id;

    /**
     *
     */
    std::string m_name;
public:
    /**
     * Constructor
     * @param id
     * @param name
     */
    User(int id, std::string name);
};

#endif //USER_USER_H
</code></pre>

<p><strong>user.cpp</strong></p>

<pre><code class="c">#include "user.h"

User::User(int id, std::string name) : m_id(id), m_name(name) {
    // Other logic in constructor
}
</code></pre>

<p>The inline initialization takes place where nowadays in PHP you would specify return type. Using this notation, you clearly <strong>light up constructor method body</strong>.</p>
]]></content>
        </entry>
    </feed>