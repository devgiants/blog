<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[devGiants]]></title>
    <link href="/blog/tags/router.xml" rel="self"/>
    <link href="/"/>
    <updated>2021-01-26T09:30:03+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Interfaces configuration with Debian 9.6]]></title>
            <link href="/blog/2018/11/28/interfaces-configuration-with-debian-9/"/>
            <updated>2018-11-28T17:26:00+01:00</updated>
            <id>/blog/2018/11/28/interfaces-configuration-with-debian-9/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>As I stated <a href="https://devgiants.fr/blog/2018/11/27/netplan-handling-network/">in my previous post</a>, I changed from ubuntu Server 18.10 to Debian 9.6 for the system I'm building (a router/firewall and application server for home automation). Below ismytraces for interface configuration.</p>

<h2 id="renaming">Renaming</h2>

<p>As I also stated <a href="https://devgiants.fr/blog/2018/11/27/netplan-handling-network/">in my previous post</a>, I need renaming for 2 reasons :
- 5 interfaces (4 LAN + 1 Wifi) : need to know which one I'm using, with <strong>a meaningful way according to my system</strong>.
- To be sure to have <strong>interfaces always linked to the same adapter</strong> (by using MAC address matching).</p>

<h3 id="for-the-session">For the session</h3>

<p>Following code will effectively rename your interface <strong>until next reboot</strong>.</p>

<pre><code>ip link set eth0 down
ip link set eth0 name your_new_name
ip link set your_new_name up
</code></pre>

<p>Quite useless on a production usage.</p>

<h3 id="definitely">Definitely</h3>

<p>The persistent solution goes through 2 steps :</p>

<h4 id="70-persistent-net.rules">70-persistent-net.rules</h4>

<p>This is a file (normally) generated by <code>/lib/udev/write_net_rules</code>, a command-line tool from <a href="https://www.debian.org/doc/manuals/debian-reference/ch03.en.html#_the_udev_system">with udev system</a>. I said normally becasue on my fresh Debian install, it's not here. I created one from examples found on the web :</p>

<pre><code>/etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:11:22:33:44:55", ATTR{type}=="1", NAME="wan"
</code></pre>

<p>So just replace your MAC address above, and the mathcing interface will take the given name.</p>

<h4 id="%2Fetc%2Fnetwork%2Finterfaces">/etc/network/interfaces</h4>

<p>Next step is to adjust interface declaration in <code>/etc/network/interfaces</code>. For my case, so far it is :</p>

<pre><code># The primary network interface
allow-hotplug wan
iface wan inet dhcp
</code></pre>

<p>Now, my <code>wan</code> interface, which will be linked to my 4G modem, will be the wan entry for all the system. The 4G router will allow address with DHCP, according to configuration done above.</p>

<p>Next steps to come :
- Create LAN interface with another available adapter
- Configure Wifi interface as an Access Point
- Setup a DHCP server for both
- Traffic forwarding from LAN/Wifi to WAN
- Setup a DNS server
- Firewall both ways</p>

<p>Stay tuned !</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Netplan : new way to handle network in Ubuntu 17+]]></title>
            <link href="/blog/2018/11/27/netplan-handling-network/"/>
            <updated>2018-11-27T17:55:00+01:00</updated>
            <id>/blog/2018/11/27/netplan-handling-network/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>I started recently a new project : turn a fanless computer to a router (actually it will handle more than that but it goes beyond this post focus). I chose Ubuntu Server 18.10, and when I came to network management and configuration, I discover <a href="https://netplan.io/">Netplan</a>.</p>

<h2 id="what-it-does">What it does</h2>

<p>It gives a bit of <strong>abstraction on network management</strong> mainly by using __ YAML configuration files__. Examples :</p>

<p><strong>For allowing DHCP address assignation for a given interface</strong></p>

<pre><code class="yaml">network:
  version: 2
  renderer: networkd
  ethernets:
    enp3s0:
      dhcp4: true
</code></pre>

<p>You may notice there is a <code>renderer</code> key : you can choose between 2 renderers, networkd (used on server) and NetworkManager (used on desktop machines)
Below is the system design explanation : 
<img src="https://assets.ubuntu.com/v1/a1a80854-netplan_design_overview.svg" alt="Netplan design explanation" /></p>

<h2 id="my-needs">My needs</h2>

<p>Having 5 network interfaces on my machine (4 Gigabits LAN + 1 wifi), I wanted to start by assigning comprehensive names. Here it starts :</p>

<p>To rename for example my future WAN interface :</p>

<pre><code class="yaml">network:
    ethernets:
        enp1s0:
            match:
                macaddress: 40:62:31:01:14:ad
            addresses: []
            dhcp4: true
            set-name: wan
</code></pre>

<p>This makes sure I handle the right one by matching with MAC address, and set the comprehensive name I'm waiting for.</p>

<p>After each modification, y ou must run <code>sudo netplan apply</code> to handle changes.</p>

<p>After reboot, the <code>ifconfig</code> command gives me :</p>

<pre><code>wan: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.108  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::4262:31ff:fe01:14ad  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 40:62:31:01:14:ad  txqueuelen 1000  (Ethernet)
        RX packets 376  bytes 393184 (393.1 KB)
        RX errors 0  dropped 7  overruns 0  frame 0
        TX packets 321  bytes 28694 (28.6 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device memory 0xf7c00000-f7c1ffff  

</code></pre>

<h2 id="the-trap">The trap</h2>

<p>Few scratches after, I started realizing than it seems to be a bad idea. Many people are angry with it because seems to have no propper and simple way to get rid of it (meaning returning back to <code>/etc/network/interfaces</code>). Also, there is many limitations, the first one I encountered about wifi. I tried to rename wifi interface the same way I did above, and I got an error message telling me for wifi the match condition cannot be used.</p>

<p>That's why I changed my plans by using a Debian 9.6 distro for starting my machine.</p>
]]></content>
        </entry>
    </feed>