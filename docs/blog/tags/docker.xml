<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[devGiants]]></title>
    <link href="/blog/tags/docker.xml" rel="self"/>
    <link href="/"/>
    <updated>2021-07-16T22:33:56+02:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Docker compose port mapping subtlety]]></title>
            <link href="/blog/2021/04/12/docker-compose-port-mapping-subtlety/"/>
            <updated>2021-04-12T10:40:00+02:00</updated>
            <id>/blog/2021/04/12/docker-compose-port-mapping-subtlety/</id>
            <content type="html"><![CDATA[<h2 id="%60docker-compose%60-port-mapping-description"><code>docker-compose</code> port mapping description</h2>

<p><code>docker-compose</code> allows you to specify port mapping between the container you're defining and the host.
Thus you can reach any service you would register to this port container (i.e Apache/Nginx on 80/443, FTP on 20/21/22...)
by host ports. According to <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#ports">compose file syntax</a>, you can use several markups to do so :</p>

<pre><code class="yaml">ports:
- "3000"
- "3000-3005"
- "8000:8000"
- "9090-9091:8080-8081"
- "49100:22"
- "127.0.0.1:8001:8001"
- "127.0.0.1:5000-5010:5000-5010"
- "127.0.0.1::5000"
- "6060:6060/udp"
- "12400-12500:1240"
</code></pre>

<h2 id="problem-that-can-arise">Problem that can arise</h2>

<p>I took wrong habits on my early days with <code>docker-compose</code>, such as <strong>not double quoting port mapping specification</strong>.
So above example become :</p>

<pre><code class="yaml">ports:
- 3000
- 3000-3005
- 8000:8000
- 9090-9091:8080-8081
- 49100:22
- 127.0.0.1:8001:8001
- 127.0.0.1:5000-5010:5000-5010
- 127.0.0.1::5000
- 6060:6060/udp
- 12400-12500:1240
</code></pre>

<p>Unquoted, expression like <code>21:21</code> will be handled by <a href="https://yaml.org/spec/1.1/">YAML engine</a> by <a href="https://en.wikipedia.org/wiki/Sexagesimal#cite_note-17">a sexagesimal notation</a> (base-60 value expression)
The integer obtained can be quite large and will definitely not be the one you expected.</p>

<ul>
<li>Best case : it raises an exception on your <code>up</code> process because your port number computed is above the <img src="http://www.sciweavers.org/tex2img.php?eq=%202%5E%7B16%7D%20-1&amp;bc=Transparent&amp;fc=Gray&amp;im=png&amp;fs=12&amp;ff=arev&amp;edit=0" alt="equation" /> limit.</li>
<li>Worst case: it generates a valid free port number and you realize at runtime there is a port communcation problem.</li>
</ul>

<p><em>Note this will only happens if the port is lower than 60 (to be able to enter in a modulo calculus regarding to base-60).</em></p>

<p><code>docker-compose</code> documentation added a note to underline this case :</p>

<blockquote>
  <p>When mapping ports in the HOST:CONTAINER format, you may experience erroneous results when using a container port lower than 60, because YAML parses numbers in the format xx:yy as a base-60 value. For this reason, we recommend always explicitly specifying your port mappings as strings.</p>
</blockquote>

<p><strong>So ALWAYS quote you ports mapping in order to express them as strings.</strong></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Simple  method to override configuration for your MySQL container]]></title>
            <link href="/blog/2020/09/10/simple-method-for-pimping-up-your-mysql-container/"/>
            <updated>2020-09-10T10:00:00+02:00</updated>
            <id>/blog/2020/09/10/simple-method-for-pimping-up-your-mysql-container/</id>
            <content type="html"><![CDATA[<h2 id="first-approach-%3A-wrong-one">First approach : wrong one</h2>

<p>All started while I was doing another dumb import, first using PhpMyAdmin. Despite the fact than the file wasn't
particularily large, it keeped ended by error <code>MySQL server has gone away</code> with a strange mention to missing data close
to an <code>ON</code> directive.</p>

<p>Few searches quickly pointed me on configuration directive <code>max_allowed_packet</code>. If too short, it indeed leads to above 
error. Beware the packet size here refers to a TCP packet, on transport layer. Too large query can trigger this.</p>

<p>As I use <a href="https://github.com/devgiants/docker-boilerplate-wordpress">my stack</a> for making project live on local, I first
thought that I would have to overkill stuff by making custom image from MySQL one, with overriding <code>my.ini</code>, exactly as I
did for <a href="https://github.com/devgiants/docker-boilerplate-wordpress/blob/master/docker/images/php-fpm7.3/Dockerfile">PHP container</a>.</p>

<p>Then I realized that exactly like PHP and Apache, a <code>conf.d</code> folder was existing with MySQL folder architecture.</p>

<h2 id="lightweight-approach">Lightweight approach</h2>

<p>So the solution was quite easier : just define a <code>override_max_packet_size.cnf</code> (you name it like you want), that lies
in <code>docker/images/mysql/conf</code>. I put this inside :</p>

<pre><code class="ini">[mysqld]
max_allowed_packet=64M
</code></pre>

<p>Then just mount a volume targeting this host folder and bind it with <code>/etc/mysql/conf.d</code></p>

<pre><code class="yaml">services:
  mysql:
    env_file: ./.env
    image: mysql:5.7
    ports:
      - ${MYSQL_HOST_PORT}:${MYSQL_PORT}
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ${MYSQL_HOST_VOLUME_PATH}:/var/lib/mysql
      - ./docker/images/mysql/config:/etc/mysql/conf.d
</code></pre>

<p>Complete stack rebuild, and try to reimport : bingo, it works.
Using this method, you can safely override any MySQL configuration directive while keeping image untouched.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker Apache impossible restart : httpd already running]]></title>
            <link href="/blog/2018/02/15/docker-apache-impossible-restart/"/>
            <updated>2018-02-15T18:35:36+01:00</updated>
            <id>/blog/2018/02/15/docker-apache-impossible-restart/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>In Docker stacks I created (<a href="https://github.com/compagnie-hyperactive/docker-boilerplate-wordpress">here</a> and <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony">here</a>), I realized after few usages that I could encounter problem during stack restart. <strong>Apache will not start</strong> with following message : <code>httpd (pid: XX) already running.</code></p>

<h2 id="explanation">Explanation</h2>

<p>I usually use <code>docker-compose stop</code> to stop my stacks between projects. It's different from <code>docker-compose down</code> because it doesn't destroy containers, but just stop them. In an ideal world, no problem with that, furthermore it's a bit faster.</p>

<p>In other hand, if stack stops because of any crash, <strong>containers can be totally unusable</strong>. Due to Apache internal architecture, a new start will find <code>/var/run/apache2/apache2.pid</code> file and container system will not launch Apache <strong>to avoid (as it seems to it) second running instance</strong>.</p>

<h2 id="solution">Solution</h2>

<p>2 parts here :
1. Use <code>docker-compose down</code> rather than <code>docker-compose stop</code>. Dockerily speaking, it's best practice because <strong>each container will be recreated from scratch</strong> each time you need to work with. As you have persisted what you need to store in volumes, you lost nothing.
2. Customize you Apache image <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-wordpress/blob/f7086f7fa23362b6c64707816fafaee2dbf73e6c/docker/images/apache2.4/Dockerfile#L17">to remove this lock file</a> when container is re-created.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker stacks presentation]]></title>
            <link href="/blog/2018/02/15/docker-stack-presentation/"/>
            <updated>2018-02-15T13:24:14+01:00</updated>
            <id>/blog/2018/02/15/docker-stack-presentation/</id>
            <content type="html"><![CDATA[<h2 id="my-goals">My goals</h2>

<p>Docker is one the (too many) things <strong>I wanted to step into</strong> for a while now, without necessary time to dive in. I finally board the train, and even if I stay closer from padawan to guru, I could build <strong>2 stacks I will introduce below</strong> : one for <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony">Symfony</a>, and another one for <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-wordpress">Wordpress</a>.</p>

<p>Both are new boilerplates used for all news projects either <a href="https://www.compagnie-hyperactive.com">@LCH</a> or personal.</p>

<h2 id="symfony-stack">Symfony stack</h2>

<p>![Symfony stack](/assets/posts-images/stack-symfony.png)</p>

<p>It allows to install <strong>a complete working environment for Symfony 2.X or 3.X</strong>. Symfony Flex (usable on 3.4+) is not in here, we created a 4.X <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/tree/symfony4">specific branch</a>). Here you find 4 containers:</p>

<ul>
<li>mysql</li>
<li>php</li>
<li>apache</li>
<li>phpmyadmin</li>
</ul>

<p>Below the specifics highlighted.</p>

<h3 id="environment-vars">Environment vars</h3>

<p>All <code>docker-compose.yml</code> needed variables are stored in a <code>.env</code> file (Docker documentation <a href="https://docs.docker.com/compose/environment-variables/#the-env-file">here</a>). 
This <code>.env</code> file is also defined inside the very containers to expose needed environment variables. To do so, just pass <code>.env</code> file as <code>env_file</code> option (documentation <a href="https://docs.docker.com/compose/environment-variables/#the-env_file-configuration-option">here</a>)</p>

<p>This gives the interesting ability <strong>to use them in files added to container</strong> (like the <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/blob/master/docker/images/apache2.4/app.conf">app.conf</a> which defines app vhost by using <code>$FPM_HOST</code>). You can do the same in the very <code>Dockerfile</code>.</p>

<p><em>Important note : to do so, just explicitely define them with the <code>ARG</code> keyword (<a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/blob/master/docker/images/apache2.4/Dockerfile#L5">example</a>).</em></p>

<h3 id="volumes">Volumes</h3>

<p>I create 3 volumes in here :
* <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/blob/master/docker-compose.yml#L11">Database one</a>
* <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/blob/master/docker-compose.yml#L30">Application files</a>
* <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/blob/master/docker-compose.yml#L47">Apache logs</a></p>

<p><em>Stay tuned for a volume focused post to come.</em></p>

<h3 id="start-bash">Start bash</h3>

<p>To help starting with, I created a <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/init.bash">bash file</a> that executes following actions :
1. Volume folders creation (if it turns they does not exist already)
2. Download and setup Symfony installer (if <code>symfony</code> command not already registered)
3. Install Symfony using the version number specified in <code>.env</code> file.
4. <code>.env</code> file copy to allow Symfony application access to its variables (described <a href="https://symfony.com/doc/3.3/components/dotenv.html">here</a> and <a href="https://symfony.com/doc/current/configuration/external_parameters.html">here</a>)
5. <code>parameters.yml.dist</code> file copy and params substitution using <code>envsubst</code> command. <em>Note: I chosed not to use <a href="https://symfony.com/doc/3.3/components/dotenv.html">DotEnv component</a> to ensure total 2.X and 3.4- retro-compatibility.</em>
6. <code>docker-compose</code> install if not already here and registered as <code>docker-compose</code>
7. Set container up (with building)
8. <code>parameters.yml</code> file removing to trigger regeneration (I've bumped to this case during my tests where a <code>composer update</code> will not refresh <code>parameters.yml</code> file)
9. <code>composer update</code></p>

<h2 id="wordpress-stack">Wordpress stack</h2>

<p>![Wordpress stack](/assets/posts-images/stack-wordpress.png)</p>

<p>Wordpress stack does the same trick as above, adding WP-CLI. I set it up using <a href="https://make.wordpress.org/cli/handbook/config/#config-files">YAML configuration file way</a> to execute commands bare, without any arguments (as they are specified <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-wordpress/blob/master/wp-cli.yml">in file</a>)</p>

<p>Bash script interesting actions : last version core download, installation, configuration, first user creation, remove Hello Dolly (RIP) and tests page/post, permalink configuration to <code>%postname%</code></p>

<p>Finally, the script installs an sets up a <a href="https://roots.io/sage/">ready-to-work-with Sage theme</a> (8.5.3 version, gulp/bower/npm one).</p>

<h2 id="what%27s-next-%3F">What's next ?</h2>

<p>This is just a start. Several noticeable features will eventually be added.</p>

<h3 id="for-both">For both</h3>

<ul>
<li>Elastic stack integration</li>
<li>Test addition</li>
</ul>

<h3 id="for-symfony-stack">For Symfony stack</h3>

<ul>
<li>Continue <a href="https://github.com/compagnie-hyperactive/docker-boilerplate-symfony/tree/symfony4">Symfony 4 branch</a></li>
<li>Add Webpack Encore for assets management</li>
<li>Add Angular for front boilerplate</li>
</ul>

<h3 id="for-wordpress-stack">For Wordpress stack</h3>

<ul>
<li>ACF Pro setup</li>
</ul>
]]></content>
        </entry>
    </feed>