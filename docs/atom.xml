<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[devGiants]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2018-12-12T10:04:53+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[API versionning strategies]]></title>
            <link href="/blog/2018/12/11/api-versionning/"/>
            <updated>2018-12-11T17:04:00+01:00</updated>
            <id>/blog/2018/12/11/api-versionning/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>API are like any other programmed systems : they evolve during time, either with bugfixes or feature addition. There is a roadmap that can eventually bring to a <strong>backward compatibility break</strong> to ensure proper evolution regarding new features.</p>

<h2 id="versionning">Versionning</h2>

<p>Versionning is important, mainly to provide your API clients ways to ensure they use the proper version regarding their needs.</p>

<p>Few ways : 
 - Domain name : <code>https://v4.your-api.com</code>
 - URI prefix : <code>https://your-api.com/api/v4</code>
 - Query string : <code>https://your-api.com/api/?v=4.0.0</code>
 - Custom HTTP header : <code>X-API-Version: 4.0.0</code>
 - <code>Accept</code> HTTP header :  <code>Accept: application/vendor.app.your-app+json; version=4.0.0</code></p>

<p>Keep as the rule of thumb than changing URLs are <strong>generally bad idea</strong>. HTTP headers are the way to go. Below is a configuration possibility for the <code>Accept</code> header.</p>

<h2 id="fosrestbundle-configuration-for-%60accept%60-header">FOSRestBundle configuration for <code>Accept</code> header</h2>

<p>2 keys to add to FOSRestBundle configuration : <code>versionning</code> and <code>view:meme_types</code></p>

<h3 id="versionning">Versionning</h3>

<p>You need to tell FOSRestBundle you are using versionning in your app :</p>

<pre><code class="yaml">fos_rest:
  ...
  versioning:
    enabled: true
    resolvers:
      media_type: # Accept header
        enabled: true
        regex: '/(v|version)=(?P&lt;version&gt;[0-9\.]+)/'
</code></pre>

<p>Of course, you an freely adapt the regex to your needs.</p>

<h3 id="add-mime-type">Add MIME type</h3>

<p>As you can see above, the MIME type you send is now custom (<code>application/vendor.app.your-app+json; version=4.0.0</code>). You need to tell FOSRestBundle to accept it :</p>

<pre><code class="yaml">fos_rest:
  ...
  view:
    ...    
    mime_types:
      json: ['application/json', 'application/json;version=1.0', 'application/json;version=2.0']
</code></pre>

<p>For the sake of brevity, I just put the matching configurations key with <code>Accept</code> header.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Interfaces configuration with Debian 9.6]]></title>
            <link href="/blog/2018/11/28/interfaces-configuration-with-debian-9/"/>
            <updated>2018-11-28T17:26:00+01:00</updated>
            <id>/blog/2018/11/28/interfaces-configuration-with-debian-9/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>As I stated <a href="https://devgiants.fr/blog/2018/11/27/netplan-handling-network/">in my previous post</a>, I changed from ubuntu Server 18.10 to Debian 9.6 for the system I'm building (a router/firewall and application server for home automation). Below ismytraces for interface configuration.</p>

<h2 id="renaming">Renaming</h2>

<p>As I also stated <a href="https://devgiants.fr/blog/2018/11/27/netplan-handling-network/">in my previous post</a>, I need renaming for 2 reasons :
- 5 interfaces (4 LAN + 1 Wifi) : need to know which one I'm using, with <strong>a meaningful way according to my system</strong>.
- To be sure to have <strong>interfaces always linked to the same adapter</strong> (by using MAC address matching).</p>

<h3 id="for-the-session">For the session</h3>

<p>Following code will effectively rename your interface <strong>until next reboot</strong>.</p>

<pre><code>ip link set eth0 down
ip link set eth0 name your_new_name
ip link set your_new_name up
</code></pre>

<p>Quite useless on a production usage.</p>

<h3 id="definitely">Definitely</h3>

<p>The persistent solution goes through 2 steps :</p>

<h4 id="70-persistent-net.rules">70-persistent-net.rules</h4>

<p>This is a file (normally) generated by <code>/lib/udev/write_net_rules</code>, a command-line tool from <a href="https://www.debian.org/doc/manuals/debian-reference/ch03.en.html#_the_udev_system">with udev system</a>. I said normally becasue on my fresh Debian install, it's not here. I created one from examples found on the web :</p>

<pre><code>/etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:11:22:33:44:55", ATTR{type}=="1", NAME="wan"
</code></pre>

<p>So just replace your MAC address above, and the mathcing interface will take the given name.</p>

<h4 id="%2Fetc%2Fnetwork%2Finterfaces">/etc/network/interfaces</h4>

<p>Next step is to adjust interface declaration in <code>/etc/network/interfaces</code>. For my case, so far it is :</p>

<pre><code># The primary network interface
allow-hotplug wan
iface wan inet dhcp
</code></pre>

<p>Now, my <code>wan</code> interface, which will be linked to my 4G modem, will be the wan entry for all the system. The 4G router will allow address with DHCP, according to configuration done above.</p>

<p>Next steps to come :
- Create LAN interface with another available adapter
- Configure Wifi interface as an Access Point
- Setup a DHCP server for both
- Traffic forwarding from LAN/Wifi to WAN
- Setup a DNS server
- Firewall both ways</p>

<p>Stay tuned !</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Netplan : new way to handle network in Ubuntu 17+]]></title>
            <link href="/blog/2018/11/27/netplan-handling-network/"/>
            <updated>2018-11-27T17:55:00+01:00</updated>
            <id>/blog/2018/11/27/netplan-handling-network/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>I started recently a new project : turn a fanless computer to a router (actually it will handle more than that but it goes beyond this post focus). I chose Ubuntu Server 18.10, and when I came to network management and configuration, I discover <a href="https://netplan.io/">Netplan</a>.</p>

<h2 id="what-it-does">What it does</h2>

<p>It gives a bit of <strong>abstraction on network management</strong> mainly by using __ YAML configuration files__. Examples :</p>

<p><strong>For allowing DHCP address assignation for a given interface</strong></p>

<pre><code class="yaml">network:
  version: 2
  renderer: networkd
  ethernets:
    enp3s0:
      dhcp4: true
</code></pre>

<p>You may notice there is a <code>renderer</code> key : you can choose between 2 renderers, networkd (used on server) and NetworkManager (used on desktop machines)
Below is the system design explanation : 
<img src="https://assets.ubuntu.com/v1/a1a80854-netplan_design_overview.svg" alt="Netplan design explanation" /></p>

<h2 id="my-needs">My needs</h2>

<p>Having 5 network interfaces on my machine (4 Gigabits LAN + 1 wifi), I wanted to start by assigning comprehensive names. Here it starts :</p>

<p>To rename for example my future WAN interface :</p>

<pre><code class="yaml">network:
    ethernets:
        enp1s0:
            match:
                macaddress: 40:62:31:01:14:ad
            addresses: []
            dhcp4: true
            set-name: wan
</code></pre>

<p>This makes sure I handle the right one by matching with MAC address, and set the comprehensive name I'm waiting for.</p>

<p>After each modification, y ou must run <code>sudo netplan apply</code> to handle changes.</p>

<p>After reboot, the <code>ifconfig</code> command gives me :</p>

<pre><code>wan: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.0.108  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::4262:31ff:fe01:14ad  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 40:62:31:01:14:ad  txqueuelen 1000  (Ethernet)
        RX packets 376  bytes 393184 (393.1 KB)
        RX errors 0  dropped 7  overruns 0  frame 0
        TX packets 321  bytes 28694 (28.6 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device memory 0xf7c00000-f7c1ffff  

</code></pre>

<h2 id="the-trap">The trap</h2>

<p>Few scratches after, I started realizing than it seems to be a bad idea. Many people are angry with it because seems to have no propper and simple way to get rid of it (meaning returning back to <code>/etc/network/interfaces</code>). Also, there is many limitations, the first one I encountered about wifi. I tried to rename wifi interface the same way I did above, and I got an error message telling me for wifi the match condition cannot be used.</p>

<p>That's why I changed my plans by using a Debian 9.6 distro for starting my machine.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[FOS REST Bundle : enforce strict behavior with query params requirements]]></title>
            <link href="/blog/2018/11/16/fos-rest-query-param-strict/"/>
            <updated>2018-11-16T17:15:00+01:00</updated>
            <id>/blog/2018/11/16/fos-rest-query-param-strict/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>Playing with <a href="https://github.com/FriendsOfSymfony/FOSRestBundle">FOS REST Bundle</a> on my journey to learn how to create rock-solid APIs, I started to create following action :</p>

<pre><code class="php">/**
     * @param PostHandler $postHandler
     * @param ParamFetcherInterface $paramFetcher
     * @Rest\Get("/posts/list")
     * @Rest\QueryParam(
     *     name="keyword",
     *     requirements="[a-zA-Z0-9]*",     
     *     nullable=true,
     *     description="The keyword to search for."
     * )
     * @Rest\QueryParam(
     *     name="order",
     *     requirements="asc|desc",
     *     default="asc",     
     *     description="Sort order (asc or desc)"
     * )
     * @Rest\QueryParam(
     *     name="limit",
     *     requirements="\d+",
     *     default="3",     
     *     description="Max number of posts per page."
     * )
     * @Rest\QueryParam(
     *     name="page",
     *     requirements="\d+",
     *     default="1",     
     *     description="The page wanted"
     * )
     * @Rest\View(
     *     statusCode = 200,
     *     serializerGroups = {"list"}
     * )
     *
     * @return Paginator
     */
    public function list(PostHandler $postHandler, ParamFetcherInterface $paramFetcher)
    {


        $postsList = $postHandler-&gt;search(
            intval($paramFetcher-&gt;get('limit')),
            intval($paramFetcher-&gt;get('page')),
            $paramFetcher-&gt;get('order'),
            $paramFetcher-&gt;get('keyword')
        );

        return $postsList;
    }
</code></pre>

<p>This simply expose a GET endpoint, with URL <code>/posts/list</code>, in order to return a... posts list. Several <code>QueryParam</code> can be passed in order to filter the obtained list. So, according to requirements given, following calls are acceptable (and processed) :
- <code>/posts/list?page=2</code> to get page 2, with default <code>limit</code>
- <code>/posts/list?order=desc</code> to order posts by ID descendant
- <code>/posts/list?keyword=test</code> to retrieves only posts with 'test' keyword.</p>

<h2 id="what-if...-we-don%27t-follow-requirements-%3F">What if... we don't follow requirements ?</h2>

<p>For each <code>QueryParam</code>, requirements are given in <a href="https://symfony.com/doc/current/routing/conditions.html">an regexp way</a>. Actually, requirements annotations are compiled to PHP. So, if I try :</p>

<ul>
<li><code>/posts/list?page=a</code></li>
<li><code>/posts/list?order=other</code></li>
<li><code>/posts/list?keyword=test%20test2</code></li>
</ul>

<p>What will happen? Nothing. By default, FOS REST Bundle will take <strong>the offending <code>QueryParam</code> default value instead</strong> of your offending value.</p>

<h2 id="what-if-we-want-to-raise-an-error%3F">What if we want to raise an error?</h2>

<p>Depending to which <code>QueryParam</code> you deal with, you may want to raise an error or not. For the above example, client developers will love you if you provide explicit errors and comprehensive messages for those <code>QueryParam</code>. The solution for that is simple : just add the <code>QueryParam</code> attribute <code>strict</code> to true in order to force FOS REST Bundle to raise an Exception.
With proper configuration (such as <code>ExceptionController</code>), you achieve to throw out-of-the-box exceptions like this :</p>

<pre><code>GET http://localhost:8081/posts/list?page=a

HTTP/1.1 400 Bad Request
Date: Fri, 16 Nov 2018 16:34:15 GMT
Server: Apache/2.4.18 (Ubuntu)
Cache-Control: no-cache, private
X-Debug-Token: 34ff9b
X-Debug-Token-Link: http://localhost:8081/_profiler/34ff9b
X-Previous-Debug-Token: fd05dc
Connection: close
Transfer-Encoding: chunked
Content-Type: application/json

{
  "error": "Parameter \"page\" of value \"a\" violated a constraint \"Parameter 'page' value, does not match requirements '\\d+'\""
}

Response code: 400 (Bad Request); Time: 4106ms; Content length: 137 bytes
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Composer usage can also be global]]></title>
            <link href="/blog/2018/11/15/composer-global/"/>
            <updated>2018-11-15T10:00:00+01:00</updated>
            <id>/blog/2018/11/15/composer-global/</id>
            <content type="html"><![CDATA[<p>As an every-day <a href="https://getcomposer.org">Composer</a> user, I always used it on a project scope, i.e with a <code>composer.json</code> lying in a specific project directory.
I discover recently than it can also be used on a <a href="https://getcomposer.org/doc/03-cli.md#global">global way</a> (meaning not related to a project) using <code>global</code> modifier:</p>

<pre><code>composer global require squizlabs/php_codesniffer
</code></pre>

<p>The globally installed package will be accessible user-system wide. On my Ubuntu system, global <code>vendor</code> folder lies on <code>~/.config/composer/</code>.</p>

<p>It strikes me yesterday that this feature is exactly the same one which is provided by <code>npm</code>, <code>yarn</code> or <code>bower</code>, other packages/dependencies manager.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[C++ allow inline initialisation]]></title>
            <link href="/blog/2018/11/15/c++-inline-initialisation/"/>
            <updated>2018-11-15T10:00:00+01:00</updated>
            <id>/blog/2018/11/15/c++-inline-initialisation/</id>
            <content type="html"><![CDATA[<p>As a PHP developer, I was greatly surprised when discovering, while learning C++, the <strong>inline initialisation</strong> process</p>

<p>Using PHP 7, you would start a class for example with :</p>

<pre><code class="php">/**
 * Class User
 * @package
 */
class User {
    /**
     * @var int $id
     */
    private int $id;

    /**
     * @var string $name
     */
    private string $name;

    /**
     * User constructor.
     *
     * @param int $id
     * @param string $name
     */
    public function __construct(int $id, string $name) {
        $this-&gt;id = $id;
        $this-&gt;name = $name;
    }
}
</code></pre>

<p>Using C++, same class would become</p>

<p><strong>user.h</strong></p>

<pre><code class="c">#ifndef USER_USER_H
#define USER_USER_H

#include &lt;iostream&gt;


class User {
private:
    /**
     *
     */
    int m_id;

    /**
     *
     */
    std::string m_name;
public:
    /**
     * Constructor
     * @param id
     * @param name
     */
    User(int id, std::string name);
};

#endif //USER_USER_H
</code></pre>

<p><strong>user.cpp</strong></p>

<pre><code class="c">#include "user.h"

User::User(int id, std::string name) : m_id(id), m_name(name) {
    // Other logic in constructor
}
</code></pre>

<p>The inline initialization takes place where nowadays in PHP you would specify return type. Using this notation, you clearly <strong>light up constructor method body</strong>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Introduce React PHP]]></title>
            <link href="/blog/2018/05/21/react-php/"/>
            <updated>2018-05-21T12:00:00+02:00</updated>
            <id>/blog/2018/05/21/react-php/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>On a recent Angular 5 training I could luckily attend to, trainer introduces JS reactive programming (using <a href="https://beta-rxjsdocs.firebaseapp.com/">RXJS</a>). Complete new paradigm as everything is event, nested one with others. 
Way different way to code... But extremely powerful.</p>

<p>Then I tought : what a wonderful way to stick to my home automation real life modeling. As a matter of fact, IoT and home automation are mainly composed of <strong>stimuli</strong> and <strong>reactions</strong>.</p>

<p>What could be better in this context than reactive loop to events? That's what lead me to <a href="https://reactphp.org/">ReactPHP</a>, which is a PHP implementation of <a href="https://fr.wikipedia.org/wiki/Reactor">Reactor pattern</a>.
This library is very well-done, concern separated.</p>

<h2 id="few-examples">Few examples</h2>

<h3 id="main-brick-%3A-event-loop">Main brick : <a href="https://github.com/reactphp/event-loop">event-loop</a></h3>

<h4 id="factory-for-loop-object-creation">Factory for loop object creation</h4>

<pre><code class="php">$loop = React\EventLoop\Factory::create();
</code></pre>

<p>Behind the scenes, this named constructor will use the best scenario according to your configuration.</p>

<pre><code class="php">  public static function create()
    {
        // @codeCoverageIgnoreStart
        if (class_exists('libev\EventLoop', false)) {
            return new ExtLibevLoop();
        } elseif (class_exists('EvLoop', false)) {
            return new ExtEvLoop();
        } elseif (class_exists('EventBase', false)) {
            return new ExtEventLoop();
        } elseif (function_exists('event_base_new') &amp;&amp; PHP_VERSION_ID &lt; 70000) {
            // only use ext-libevent on PHP &lt; 7 for now
            return new ExtLibeventLoop();
        }
        return new StreamSelectLoop();
        // @codeCoverageIgnoreEnd
    }
</code></pre>

<p>More details on differents implementations and extensions related <a href="https://github.com/reactphp/event-loop#loop-implementations">here</a>. So far I'm using the fallback one (StreamSelect) but will enhance this point soon.</p>

<h4 id="loop-run">Loop run</h4>

<pre><code class="php">$loop-&gt;run();
</code></pre>

<p>Short and sweet. This must be the script last instruction because it will enter in infinite loop from here.</p>

<h4 id="timers">Timers</h4>

<p>```php
 $loop->addTimer(0.8, function () {
     echo 'world!' . PHP_EOL;
 });</p>

<p>$loop->addTimer(0.3, function () {
     echo 'hello ';
 });
 $loop->run();
 ```</p>

<p>Here start the magic. The above script will echo 'hello' 0.3s after script beginning then 'world' at 0.5s (0.8s from start). No matter timer registration order, loop will handle orders.
 Thanks to closures/callbacks, you can put your processes inline for shortness.</p>

<p><em>Note: you can (and certainly will) use the <code>use</code> keyword to port any variables in the callback code block context</em>.</p>

<p>```php
function hello($name, LoopInterface $loop)
{
    $loop->addTimer(1.0, function () use ($name) {
        echo "hello $name\n";
    });
}</p>

<p>hello('Tester', $loop);
 $loop->run();
 ```</p>

<h3 id="stream"><a href="https://github.com/reactphp/stream">stream</a></h3>

<h4 id="readablestreaminterface">ReadableStreamInterface</h4>

<p>```php
$stream->on('data', function ($data) {
    echo $data;
});</p>

<p>$loop->run();
 ```</p>

<p>Forr example, the end event will be emitted once the source stream has successfully reached the end of the stream (EOF).</p>

<p>```php
$stream->on('end', function () {
    echo 'END';
});</p>

<p>$loop->run();
 ```</p>

<p>Among available events: pipe, pause, resume, close...</p>

<h4 id="writablestreaminterface">WritableStreamInterface</h4>

<p>Same idea <a href="https://github.com/reactphp/stream#writablestreaminterface">write-oriented</a>.</p>

<p>As far as I write this, this is only what I can practically test and use.</p>

<p>More to be discussed here in future : socket, promise...</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to create a swap for session usage]]></title>
            <link href="/blog/2018/04/09/create-quick-swap/"/>
            <updated>2018-04-09T17:44:24+02:00</updated>
            <id>/blog/2018/04/09/create-quick-swap/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>Long silence from me past weeks as I was working on my home automation architecture, especially on IoT POV. I will publish everything here, but today I wanted to share a quick tip to create <strong>a swap space on a Linx system that doesn't have one</strong>.</p>

<h2 id="why-so%3F">Why so?</h2>

<p>I'm deeply testing <a href="http://www.friendlyarm.com/index.php?route=product/product&amp;product_id=132">NanoPi NEO</a> these days and without any doubt it will be my home automation corner stone. I started using the 256Mo version and the Ubuntu Core Linux image provided comes without any swap space.</p>

<p>As I started to make some <code>composer update</code> (because all my low level interaction is done with <a href="https://reactphp.org/">ReactPHP</a>, stay tuned !), device exploded in such messages :</p>

<pre><code>The following exception is caused by a lack of memory or swap, or not having swap configured
Check https://getcomposer.org/doc/articles/troubleshooting.md#proc-open-fork-failed-errors for details

PHP Warning:  proc_open(): fork failed - Cannot allocate memory in phar:///usr/local/bin/composer/vendor/symfony/console/Application.php on line 958

Warning: proc_open(): fork failed - Cannot allocate memory in phar:///usr/local/bin/composer/vendor/symfony/console/Application.php on line 958

  [ErrorException]                                   
  proc_open(): fork failed - Cannot allocate memory  


</code></pre>

<p>I forgot that 256Mo is not a lot... Solution : make a swap (that will stand until the next reboot)</p>

<pre><code># Use dd to create a 256 Mo sxap space, filled with 0, and named /var/swap.1
sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=256

# Inform system that swap exists and where
sudo /sbin/mkswap /var/swap.1

# Enable
sudo /sbin/swapon /var/swap.1
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Symfony Config : how to handle entire section require status ?]]></title>
            <link href="/blog/2018/02/20/entire-section-requirements-symfony-config/"/>
            <updated>2018-02-20T16:44:24+01:00</updated>
            <id>/blog/2018/02/20/entire-section-requirements-symfony-config/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p><a href="http://symfony.com/doc/current/components/config.html">Symfony Config Component</a> is an extremely powerful way of configuring bundles and apps. 
For my work in progress in <a href="https://github.com/compagnie-hyperactive/UserBundle">LCH User bundle</a>, I wanted to set <code>templates</code> array node as <strong>not required</strong>.</p>

<h2 id="what%27s-at-stake">What's at stake</h2>

<p>All other nodes types are not required unless you add the <code>isRequired()</code> (<a href="https://github.com/compagnie-hyperactive/UserBundle/blob/master/DependencyInjection/Configuration.php#L62">example</a>) method to your node. Doing so, you will have an exception thrown saying that you have to define this key, which is what you want.</p>

<p>For the array node, it's <strong>different</strong> : it's enabled by default and you have to specify the <code>canBeEnabled()</code> (<a href="https://github.com/compagnie-hyperactive/UserBundle/blob/master/DependencyInjection/Configuration.php#L83">example</a>) method to your array node to ensure that it will be disabled by default, but enabled if needed.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Flex : mixing autowiring and old-fashioned service way]]></title>
            <link href="/blog/2018/02/20/mixing-autowiring-with-old-fashoned-service-way/"/>
            <updated>2018-02-20T16:44:24+01:00</updated>
            <id>/blog/2018/02/20/mixing-autowiring-with-old-fashoned-service-way/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p><a href="https://symfony.com/doc/current/setup/flex.html">Symfony Flex</a> incredibly reduces and simplifies day-to-day Symfony usage. Among other things, <a href="https://symfony.com/doc/current/service_container.html#creating-configuring-services-in-the-container">autowiring</a> is one of the biggest.
<strong>But what if you need to use some old-school service naming for further usage ?</strong></p>

<h2 id="solution">Solution</h2>

<p>For the CMS bundle I'm working on, I needed to refer to an handler for security (successful/failure authentication). Docs states I can use a service name in <code>security.yaml</code> :</p>

<pre><code class="yaml">admin:
    provider: db_provider # Use any declared provider above
    form_login:
        login_path: /admin/login
        check_path: /admin/login
        default_target_path: /admin
        username_parameter: login[username_or_email]
        password_parameter: login[password]

        success_handler:    app.security_handler
        failure_handler:    app.security_handler
</code></pre>

<p>The handler :</p>

<pre><code class="php">use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\RouterInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Http\Authentication\AuthenticationFailureHandlerInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationSuccessHandlerInterface;

class SecurityHandler implements AuthenticationSuccessHandlerInterface, AuthenticationFailureHandlerInterface
{

    private $router;

    public function __construct(RouterInterface $router)
    {
        $this-&gt;router = $router;
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token)
    {
        // TODO make necessary check to ensure proper redirection after successful authentication   
        return new RedirectResponse($this-&gt;router-&gt;generate('index'));
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
    {
        // TODO make necessary check to ensure proper redirection after failure authen authentication
        return new RedirectResponse($this-&gt;router-&gt;generate('app_login'));
    }
}

</code></pre>

<p>But from a Flex point of view, <strong>the constructor with type-hinted arguments is enough</strong>.</p>

<p>The solution is in 2 steps</p>

<ol>
<li>Define the service "old-fashioned" way</li>
</ol>

<pre><code class="yaml">app.security_handler:
  class: App\Listener\Security\SecurityHandler
</code></pre>

<p>But doing so, to core will switch to old way to load service. Meaning that you would have to provide parameters/services for dependancy injection manually.</p>

<ol start="2">
<li>Define a <a href="https://github.com/compagnie-hyperactive/UserBundle">service alias</a></li>
</ol>

<pre><code class="yaml">App\Listener\Security\SecurityHandler: '@app.security_handler'
</code></pre>

<p>This very last step <strong>enable autowiring for your service</strong>. I can use the name in security.yaml as above.</p>
]]></content>
        </entry>
    </feed>